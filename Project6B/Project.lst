Microsoft (R) Macro Assembler Version 14.15.26726.0	    03/05/19 16:54:39
Program 6B		(Project6B.asm			     Page 1 - 1


				TITLE Program 6B		(Project6B.asm)

				; Author: Bryce Hahn
				; Course/Project ID: CS 271 Project 6
				; Date: 3/4/2019
				; Description:
				;	This program will produce a random equation in the format
				;		(n!)/(r!(n-r)!) generating n from [3 to 12] and r 
				;		from [1 to n]. The user then has to solve and answer
				;		the problem solution to the input. If they are correct,
				;		let them know, and keep playing until the user asks to
				;		stop. The factorial calculation happens recursively.
				;		EC: I keep track of how many got right vs wrong, and
				;			display for each new problem.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;-----------------------;
				;    Var Declaration    ;
				;-----------------------;
 00000000			.data

 00000000 2D 09 20 43 6F	project			BYTE	"-	 Combinations Calculator    --   Bryce Hahn  -", 0
	   6D 62 69 6E 61
	   74 69 6F 6E 73
	   20 43 61 6C 63
	   75 6C 61 74 6F
	   72 20 20 20 20
	   2D 2D 20 20 20
	   42 72 79 63 65
	   20 48 61 68 6E
	   20 20 2D 00
 00000031 54 68 65 20 70	intro_1			BYTE	"The program will generate a number n [3 - 12] and a number r [1 - n] which will ",0; Intro 1
	   72 6F 67 72 61
	   6D 20 77 69 6C
	   6C 20 67 65 6E
	   65 72 61 74 65
	   20 61 20 6E 75
	   6D 62 65 72 20
	   6E 20 5B 33 20
	   2D 20 31 32 5D
	   20 61 6E 64 20
	   61 20 6E 75 6D
	   62 65 72 20 72
	   20 5B 31 20 2D
	   20 6E 5D 20 77
	   68 69 63 68 20
	   77 69 6C 6C 20
	   00
 00000082 62 65 20 75 73	intro_2			BYTE	"be used to calculate the number of combinations of r items taken from a set ",0	; Intro 2
	   65 64 20 74 6F
	   20 63 61 6C 63
	   75 6C 61 74 65
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   63 6F 6D 62 69
	   6E 61 74 69 6F
	   6E 73 20 6F 66
	   20 72 20 69 74
	   65 6D 73 20 74
	   61 6B 65 6E 20
	   66 72 6F 6D 20
	   61 20 73 65 74
	   20 00
 000000CF 6F 66 20 6E 20	intro_3			BYTE	"of n items. The user is then prompted to answer the solution to the problem, ", 0	; Intro 3
	   69 74 65 6D 73
	   2E 20 54 68 65
	   20 75 73 65 72
	   20 69 73 20 74
	   68 65 6E 20 70
	   72 6F 6D 70 74
	   65 64 20 74 6F
	   20 61 6E 73 77
	   65 72 20 74 68
	   65 20 73 6F 6C
	   75 74 69 6F 6E
	   20 74 6F 20 74
	   68 65 20 70 72
	   6F 62 6C 65 6D
	   2C 20 00
 0000011D 61 6E 64 20 74	intro_4			BYTE	"and the correct answer will then be displayed after. The program will continue ", 0; Intro 4
	   68 65 20 63 6F
	   72 72 65 63 74
	   20 61 6E 73 77
	   65 72 20 77 69
	   6C 6C 20 74 68
	   65 6E 20 62 65
	   20 64 69 73 70
	   6C 61 79 65 64
	   20 61 66 74 65
	   72 2E 20 54 68
	   65 20 70 72 6F
	   67 72 61 6D 20
	   77 69 6C 6C 20
	   63 6F 6E 74 69
	   6E 75 65 20 00
 0000016D 75 6E 74 69 6C	intro_5			BYTE	"until the user expressively demands to stop.", 0									; Intro 5
	   20 74 68 65 20
	   75 73 65 72 20
	   65 78 70 72 65
	   73 73 69 76 65
	   6C 79 20 64 65
	   6D 61 6E 64 73
	   20 74 6F 20 73
	   74 6F 70 2E 00
 0000019A 45 43 3A 20 49	EC_intro_1		BYTE	"EC: I keep track of how many problems the user gets right vs. wrong",0; EC 1
	   20 6B 65 65 70
	   20 74 72 61 63
	   6B 20 6F 66 20
	   68 6F 77 20 6D
	   61 6E 79 20 70
	   72 6F 62 6C 65
	   6D 73 20 74 68
	   65 20 75 73 65
	   72 20 67 65 74
	   73 20 72 69 67
	   68 74 20 76 73
	   2E 20 77 72 6F
	   6E 67 00
 000001DE 45 43 3A 20 49	EC_intro_2		BYTE	"EC: I utalise the floating point operators and registers for calculations", 0		; EC 2
	   20 75 74 61 6C
	   69 73 65 20 74
	   68 65 20 66 6C
	   6F 61 74 69 6E
	   67 20 70 6F 69
	   6E 74 20 6F 70
	   65 72 61 74 6F
	   72 73 20 61 6E
	   64 20 72 65 67
	   69 73 74 65 72
	   73 20 66 6F 72
	   20 63 61 6C 63
	   75 6C 61 74 69
	   6F 6E 73 00
 00000228 50 52 4F 42 4C	problem_1		BYTE	"PROBLEM ", 0																		; The problem, then the problem number
	   45 4D 20 00
 00000231 4E 75 6D 62 65	problem_2		BYTE	"Number of elements in the set: ", 0
	   72 20 6F 66 20
	   65 6C 65 6D 65
	   6E 74 73 20 69
	   6E 20 74 68 65
	   20 73 65 74 3A
	   20 00
 00000251 4E 75 6D 62 65	problem_3		BYTE	"Number of elements to choose from the set: ", 0
	   72 20 6F 66 20
	   65 6C 65 6D 65
	   6E 74 73 20 74
	   6F 20 63 68 6F
	   6F 73 65 20 66
	   72 6F 6D 20 74
	   68 65 20 73 65
	   74 3A 20 00
 0000027D 50 6C 65 61 73	prompt_1		BYTE	"Please enter the solution to the problem: ", 0										; Prompt for a random number
	   65 20 65 6E 74
	   65 72 20 74 68
	   65 20 73 6F 6C
	   75 74 69 6F 6E
	   20 74 6F 20 74
	   68 65 20 70 72
	   6F 62 6C 65 6D
	   3A 20 00
 000002A8 57 6F 75 6C 64	prompt_2		BYTE	"Would you like to practice another problem? (Y/N) ", 0								; as the user to keep going
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 70 72
	   61 63 74 69 63
	   65 20 61 6E 6F
	   74 68 65 72 20
	   70 72 6F 62 6C
	   65 6D 3F 20 28
	   59 2F 4E 29 20
	   00
 000002DB 54 68 65 20 65	failed_input_1	BYTE	"The entered number was above the allowed range!", 0								; Warn the user that they can't input such a RIDICULOUSLY high number
	   6E 74 65 72 65
	   64 20 6E 75 6D
	   62 65 72 20 77
	   61 73 20 61 62
	   6F 76 65 20 74
	   68 65 20 61 6C
	   6C 6F 77 65 64
	   20 72 61 6E 67
	   65 21 00
 0000030B 54 68 65 20 65	failed_input_2	BYTE	"The entered number was bellow the allowed range!", 0								; Warn the user that they can't input such a CRAZY low number
	   6E 74 65 72 65
	   64 20 6E 75 6D
	   62 65 72 20 77
	   61 73 20 62 65
	   6C 6C 6F 77 20
	   74 68 65 20 61
	   6C 6C 6F 77 65
	   64 20 72 61 6E
	   67 65 21 00
 0000033C 54 68 65 20 65	failed_input_3	BYTE	"The entered value was not a number, please try again.", 0							; The user didn't input a number in for the solution
	   6E 74 65 72 65
	   64 20 76 61 6C
	   75 65 20 77 61
	   73 20 6E 6F 74
	   20 61 20 6E 75
	   6D 62 65 72 2C
	   20 70 6C 65 61
	   73 65 20 74 72
	   79 20 61 67 61
	   69 6E 2E 00
 00000372 20 20 20 20 20	outro_1			BYTE	"             ---  Outputting your unsorted array  ---             ", 0
	   20 20 20 20 20
	   20 20 20 2D 2D
	   2D 20 20 4F 75
	   74 70 75 74 74
	   69 6E 67 20 79
	   6F 75 72 20 75
	   6E 73 6F 72 74
	   65 64 20 61 72
	   72 61 79 20 20
	   2D 2D 2D 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 00
 000003B5 54 68 65 20 61	outro_2			BYTE	"The array median is: ", 0
	   72 72 61 79 20
	   6D 65 64 69 61
	   6E 20 69 73 3A
	   20 00
 000003CB 20 20 20 20 20	outro_3			BYTE	"             ---  Outputting your sorted array  ---             ", 0
	   20 20 20 20 20
	   20 20 20 2D 2D
	   2D 20 20 4F 75
	   74 70 75 74 74
	   69 6E 67 20 79
	   6F 75 72 20 73
	   6F 72 74 65 64
	   20 61 72 72 61
	   79 20 20 2D 2D
	   2D 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 00
 0000040C 54 68 61 6E 6B	finished		BYTE	"Thank you for using my program! Goodbye.", 0										; Thank the user and say goodbye by name input
	   20 79 6F 75 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   21 20 47 6F 6F
	   64 62 79 65 2E
	   00


 = 0000000C			nMAXNUM			=		12																					; The maximum range for n
 = 00000003			nMINNUM			=		3																					; The minimum range for n
 = 00000001			rMINNUM			=		1																					; The lowest number that can be generated for r
 00000435 00000001		problemNum		DWORD	1
 00000439 00000000		problemsRight	DWORD	0
 0000043D 00000000		n				DWORD	?
 00000441 00000000		r				DWORD	?
 00000445 00000000		answer			DWORD	?


				;------------------------;
				;    Code Declaration    ;
				; This section is where	 ;
				; the bulk of the program;
				; is going to be writen  ;
				;------------------------;
 00000000			.code
				;---------------------------------------------------------------;
				;	main PROC will be called once the program is run, this		;
				;	is where we can call other processes so that we aren't		;
				;	crowded into the main function like this (GROSS), so we		;
				;	will implement this into further projects.					;
				;---------------------------------------------------------------;
 00000000			main	PROC
 00000000  E8 00000000 E			call	Randomize						; set the time seed for the randomize functions in order to keep the generator psuedo-random

					;-----------Display Program Intro-----------;
 00000005  68 00000000 R			push	OFFSET	project					; +36
 0000000A  68 00000031 R			push	OFFSET	intro_1					; +32
 0000000F  68 00000082 R			push	OFFSET	intro_2					; +28
 00000014  68 000000CF R			push	OFFSET	intro_3					; +24
 00000019  68 0000011D R			push	OFFSET	intro_4					; +20
 0000001E  68 0000016D R			push	OFFSET	intro_5					; +26
 00000023  68 0000019A R			push	OFFSET	EC_intro_1				; +12
 00000028  68 000001DE R			push	OFFSET	EC_intro_2				; +8
 0000002D  E8 00000053				call	intro

					;-----------Generate A Problem--------------;
 00000032  68 00000228 R			push	OFFSET	problem_1				; +36
 00000037  68 00000231 R			push	OFFSET	problem_2				; +32
 0000003C  68 00000251 R			push	OFFSET	problem_3				; +28
 00000041  FF 35 0000043D R			push	n								; +24
 00000047  FF 35 00000441 R			push	r								; +20
 0000004D  FF 35 00000445 R			push	answer							; +16
 00000053  FF 35 00000435 R			push	problemNum						; +12
 00000059  FF 35 00000439 R			push	problemsRight					; +8
 0000005F  E8 0000009A				call	showProblem

					;-----------Get User Input------------------;
 00000064  68 0000027D R			push	OFFSET	prompt_1				; +12
 00000069  FF 35 00000445 R			push	answer							; +8
 0000006F  E8 00000131				call	getData

					;------------End Of The Program-------------;
 00000074  68 0000040C R			push	OFFSET	finished				; +8
 00000079  E8 00000136				call	restart
					exit										; close program, return to OS
 0000007E  6A 00	   *	    push   +000000000h
 00000080  E8 00000000 E   *	    call   ExitProcess
 00000085			main	ENDP									; the main PROC is finished, this symbolyses that we are done with the proc

				;---------------------------------------------------------------;
				;	The intro procedure will be called right off the bat, sort	;
				;	of like before using procedures. This will allow to keep	;
				;	the main function clean and organized, making debugging		;
				;	easier! This function litterally just calls all intro		;
				;	scripts.													;
				;	Parameters: program, intro_1, intro_2, intro_3, intro_4,	;
				;	intro_5, EC_intro_1, EC_intro_2, EC_intro_3, EC_intro_4		;
				;	Returns: 40 bytes from the stack							;
				;	Pre-Conditions: none										;
				;---------------------------------------------------------------;
 00000085			intro	PROC
 00000085  B8 00000017			mov		eax, lightGray + (blue * 16)		; color varaibles consist of: black, white, brown, yellow, blue, green, cyan, red, magenta, gray, lightBlue, lightGreen, lightCyan, lightRed, lightMagenta, and lightGray.
 0000008A  E8 00000000 E		call	setTextColor						; EXTRA CREDIT: change background and foreground colors

 0000008F  55				push	ebp									; push all the general purpose regs to stack
 00000090  8B EC			mov		ebp, esp							; save the stack into ebp to not alter data

 00000092  8B 55 24			mov		edx, [ebp + 36]						; program
 00000095  E8 00000000 E		call	WriteString
 0000009A  E8 00000000 E		call	CrLf
 0000009F  8B 55 20			mov		edx, [ebp + 32]						; intro_1
 000000A2  E8 00000000 E		call	WriteString
 000000A7  E8 00000000 E		call	CrLf
 000000AC  8B 55 1C			mov		edx, [ebp + 28]						; intro_2
 000000AF  E8 00000000 E		call	WriteString
 000000B4  E8 00000000 E		call	CrLf
 000000B9  8B 55 18			mov		edx, [ebp + 24]						; intro_3
 000000BC  E8 00000000 E		call	WriteString
 000000C1  E8 00000000 E		call	CrLf
 000000C6  8B 55 14			mov		edx, [ebp + 20]						; intro_4
 000000C9  E8 00000000 E		call	WriteString
 000000CE  E8 00000000 E		call	CrLf
 000000D3  8B 55 10			mov		edx, [ebp + 16]						; intro_5
 000000D6  E8 00000000 E		call	WriteString
 000000DB  E8 00000000 E		call	CrLf
					
 000000E0  8B 55 0C			mov		edx, [ebp + 12]						; EC_intro_1
 000000E3  E8 00000000 E		call	WriteString
 000000E8  E8 00000000 E		call	CrLf
 000000ED  8B 55 08			mov		edx, [ebp + 8]						; EC_intro_2
 000000F0  E8 00000000 E		call	WriteString
 000000F5  E8 00000000 E		call	CrLf

 000000FA  5D				pop		ebp
 000000FB  C2 0022			ret		34									; clean the stack 34 bytes up
 000000FE			intro	ENDP

				;---------------------------------------------------------------;
				;	The generateProblem procedure will generate the 2 numbers	;
				;	in the problem, and then print the question to the screen.	;
				;	The procedure will also solve the problem itself, and then	;
				;	jump to the next procedure to wait for user answer to cross	;
				;	check answers and see if the user is correct.				;
				;	Parameters: 
				;---------------------------------------------------------------;
 000000FE			showProblem	PROC
 000000FE  55				push	ebp
 000000FF  8B EC			mov		ebp, esp

 00000101  8B 55 24			mov		edx, [ebp + 36]						; problem_1
 00000104  E8 00000000 E		call	WriteString
 00000109  8B 45 0C			mov		eax, [ebp + 12]						; problemNum
 0000010C  E8 00000000 E		call	WriteDec
 00000111  E8 00000000 E		call	CrLf
 00000116  8B 55 20			mov		edx, [ebp + 32]						; problem_2
 00000119  E8 00000000 E		call	WriteString

 0000011E  B8 0000000C			mov		eax, nMAXNUM						; set the max to eax
 00000123  83 E8 03			sub		eax, nMINNUM						; subtract the lowest from eax (this will give us a range of 1 to (max-min))
 00000126  E8 00000000 E		call	RandomRange							; generate random number in range (1 to (max-min))
 0000012B  83 C0 03			add		eax, nMINNUM						; add lowest to generated number (this fixes the range to be from min to max)
 0000012E  89 45 18			mov		[ebp + 24], eax						; move the n value to the stack

 00000131  E8 00000000 E		call	WriteDec							; this prints our N value to the screen

 00000136  E8 00000000 E		call	CrLf
 0000013B  8B 55 1C			mov		edx, [ebp + 28]						; problem_3
 0000013E  E8 00000000 E		call	WriteString

 00000143  83 E8 01			sub		eax, rMINNUM						; subtract the lowest from eax (this will give us a range of 1 to (max-min))
 00000146  E8 00000000 E		call	RandomRange							; generate random number in range (1 to (max-min))
 0000014B  83 C0 01			add		eax, rMINNUM						; add lowest to generated number (this fixes the range to be from min to max)
 0000014E  89 45 14			mov		[ebp + 20], eax						; move the r value to the stack

 00000151  E8 00000000 E		call	WriteDec							; this prints our R value to the screen
 00000156  E8 00000000 E		call	CrLf


 0000015B  E8 00000004			call	combinations						; this will add 4 bytes to the index distance of the addresses (to compensate for return address)
					

 00000160  5D				pop		ebp
 00000161  C2 0022			ret		34
 00000164			showProblem	ENDP

				;---------------------------------------------------------------;
				;	The combinations process calculates (n!)/(r!(n-r)!), and	;
				;	stores the value in result. It will call factorial process	;
				;	3 times, for n!, r!, and (n-r)! respectively, then multiply	;
				;	and divide as needed.										;
				;	Parameters: n, r as values, answer as reference				;
				;	Returns: the problems calculation value to answer			;
				;	Pre-Conditions, n and r are real integer values				;
				;---------------------------------------------------------------;
 00000164			combinations	PROC
					;sub		esp, 12								; make space for 3 local variables

					;------------------N!-----------------------;
 00000164  FF 75 18			push	[ebp + 24]							; push the N value to the stack [ebp + 8] in factorial
 00000167  E8 00000017			call	factorial							; returns the N! to eax
					;mov		DWORD PTR [ebp - 4], eax

					;------------------R!-----------------------;
 0000016C  FF 75 14			push	[ebp + 20]							; push the R value to the stack [ebp + 8] in factorial
 0000016F  E8 0000000F			call	factorial							; returns the R! to eax
					;mov		DWORD PTR [ebp - 8], eax

					;-----------------(N-R)!--------------------;
 00000174  8B 45 18			mov		eax, [ebp + 24]						; The N value
 00000177  8B 5D 14			mov		ebx, [ebp + 20]						; The R value
 0000017A  2B C3			sub		eax, ebx							; N - R Value
 0000017C  50				push	eax
 0000017D  E8 00000001			call	factorial							; returns the (N - R)! to eax
					;mov		DWORD PTR [ebp - 12], eax

					

					;mov		esp, ebp							; remove locals from stack
 00000182  C3				ret
 00000183			combinations	ENDP

				;---------------------------------------------------------------;
				;	The factorial procedure will take an input on the stack, i,	;
				;	and recursively multiply itself until it has reached 1.		;
				;	Parameters: i as current factorial, iS as factorial sum		;
				;	returns: EAX = value of the factorial						;
				;	Pre-Conditions: i as a valid integer.						;
				;---------------------------------------------------------------;
 00000183			factorial	PROC
 00000183  55				push	ebp
 00000184  8B EC			mov		ebp, esp
					
 00000186  8B 45 08			mov		eax, [ebp + 8]						; the designated stack location for the index value
					;call	WriteDec
 00000189  83 F8 00			cmp		eax, 0								; check to see if index > 0
 0000018C  77 07			ja		RecursiveCall						; i > 0
 0000018E  B8 00000001			mov		eax, 1
 00000193  EB 0C			jmp		endRecursion						; we need to loop back to the first call

 00000195				RecursiveCall:
 00000195  48					dec		eax								; i - 1
 00000196  50					push	eax								; used as the next layer of recursions new index
 00000197  E8 FFFFFFE7				call	factorial

 0000019C				Return:										; only called when we keep looping back layers of recursion
 0000019C  8B 5D 08				mov		ebx, [ebp + 8]					; get index
 0000019F  F7 E3				mul		ebx								; prod * index

 000001A1				endRecursion:
 000001A1  5D					pop		ebp								; remove the current layer of recursion's ebp placer
 000001A2  C2 0004				ret		4								; clear the dedicated stack bytes for the index value
 000001A5			factorial	ENDP

				;---------------------------------------------------------------;
				;	The getData procedure will get the user input as a string	;
				;	and verify the input was an integer. It will then compare	;
				;	the user input to the answer of the problem, and reply		;
				;	accordingly.												;
				;	Parameters: prompt_1, failed_input_1, failed_input_2		;
				;	Returns: if user answer was correct							;
				;	Pre-Condition: answer should be a valid integer				;
				;---------------------------------------------------------------;
 000001A5			getData	PROC
 000001A5  55				push	ebp
 000001A6  8B EC			mov		ebp, esp
					
 000001A8  8B 55 0C			mov		edx, [ebp + 12]						; prompt_1
 000001AB  E8 00000000 E		call	WriteString

					;mov		ecx, SIZEOF	userinput
					;call	ReadString
					;mov		byteCount, eax




 000001B0  5D				pop		ebp
 000001B1  C2 0008			ret		8									; clean the stack 12 bytes
 000001B4			getData	ENDP

				;---------------------------------------------------------------;
				;	The restart procedure will test to see if the user is		;
				;	wanting to run the process one more time, which is 1		;
				;	is inputed, will jump the user back into the				;
				;	introduction where the user will be asked to input more		;
				;	integers. If anything else is answered, the program will	;
				;	exit to the OS.												;
				;	Parameters: finished										;
				;	Returns: none												;
				;	Pre-Conditions: none										;
				;---------------------------------------------------------------;
 000001B4			restart		PROC
 000001B4  55				push	ebp
 000001B5  8B EC			mov		ebp, esp
					
 000001B7  E8 00000000 E		call	CrLf
 000001BC  8B 55 08			mov		edx, [ebp + 8]						; finished
 000001BF  E8 00000000 E		call	WriteString

 000001C4  5D				pop		ebp
 000001C5  C2 0004			ret		4
 000001C8			restart		ENDP

				END main										; the symbolyses that the main program is finished
Microsoft (R) Macro Assembler Version 14.15.26726.0	    03/05/19 16:54:39
Program 6B		(Project6B.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000449 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001C8 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
combinations . . . . . . . . . .	P Near	 00000164 _TEXT	Length= 0000001F Public STDCALL
factorial  . . . . . . . . . . .	P Near	 00000183 _TEXT	Length= 00000022 Public STDCALL
  RecursiveCall  . . . . . . . .	L Near	 00000195 _TEXT	
  Return . . . . . . . . . . . .	L Near	 0000019C _TEXT	
  endRecursion . . . . . . . . .	L Near	 000001A1 _TEXT	
getData  . . . . . . . . . . . .	P Near	 000001A5 _TEXT	Length= 0000000F Public STDCALL
intro  . . . . . . . . . . . . .	P Near	 00000085 _TEXT	Length= 00000079 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000085 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
restart  . . . . . . . . . . . .	P Near	 000001B4 _TEXT	Length= 00000014 Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showProblem  . . . . . . . . . .	P Near	 000000FE _TEXT	Length= 00000066 Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
EC_intro_1 . . . . . . . . . . .	Byte	 0000019A _DATA	
EC_intro_2 . . . . . . . . . . .	Byte	 000001DE _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
answer . . . . . . . . . . . . .	DWord	 00000445 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
failed_input_1 . . . . . . . . .	Byte	 000002DB _DATA	
failed_input_2 . . . . . . . . .	Byte	 0000030B _DATA	
failed_input_3 . . . . . . . . .	Byte	 0000033C _DATA	
finished . . . . . . . . . . . .	Byte	 0000040C _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_1  . . . . . . . . . . . .	Byte	 00000031 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00000082 _DATA	
intro_3  . . . . . . . . . . . .	Byte	 000000CF _DATA	
intro_4  . . . . . . . . . . . .	Byte	 0000011D _DATA	
intro_5  . . . . . . . . . . . .	Byte	 0000016D _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
nMAXNUM  . . . . . . . . . . . .	Number	 0000000Ch   
nMINNUM  . . . . . . . . . . . .	Number	 00000003h   
n  . . . . . . . . . . . . . . .	DWord	 0000043D _DATA	
outro_1  . . . . . . . . . . . .	Byte	 00000372 _DATA	
outro_2  . . . . . . . . . . . .	Byte	 000003B5 _DATA	
outro_3  . . . . . . . . . . . .	Byte	 000003CB _DATA	
problemNum . . . . . . . . . . .	DWord	 00000435 _DATA	
problem_1  . . . . . . . . . . .	Byte	 00000228 _DATA	
problem_2  . . . . . . . . . . .	Byte	 00000231 _DATA	
problem_3  . . . . . . . . . . .	Byte	 00000251 _DATA	
problemsRight  . . . . . . . . .	DWord	 00000439 _DATA	
project  . . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 0000027D _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 000002A8 _DATA	
rMINNUM  . . . . . . . . . . . .	Number	 00000001h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
r  . . . . . . . . . . . . . . .	DWord	 00000441 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
