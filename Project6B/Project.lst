Microsoft (R) Macro Assembler Version 14.16.27027.1	    03/12/19 17:45:29
Program 6B		(Project6B.asm			     Page 1 - 1


				TITLE Program 6B		(Project6B.asm)

				; Author: Bryce Hahn
				; Course/Project ID: CS 271 Project 6B
				; Date: 3/12/2019
				; Description:
				;	This program will produce a random equation in the format
				;		(n!)/(r!(n-r)!) generating n from [3 to 12] and r 
				;		from [1 to n]. The user then has to solve and answer
				;		the problem solution to the input. If they are correct,
				;		let them know, and keep playing until the user asks to
				;		stop. The factorial calculation happens recursively.
				;		EC: I keep track of how many got right vs wrong, and
				;			display for each new problem.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;-----------------------;
				;    Var Declaration    ;
				;-----------------------;
 00000000			.data

 00000000 2D 09 20 43 6F	project			BYTE	"-	 Combinations Calculator    --   Bryce Hahn  -", 0
	   6D 62 69 6E 61
	   74 69 6F 6E 73
	   20 43 61 6C 63
	   75 6C 61 74 6F
	   72 20 20 20 20
	   2D 2D 20 20 20
	   42 72 79 63 65
	   20 48 61 68 6E
	   20 20 2D 00
 00000031 54 68 65 20 70	intro_1			BYTE	"The program will generate a number n [3 - 12] and a number r [1 - n] which will ",0; Intro 1
	   72 6F 67 72 61
	   6D 20 77 69 6C
	   6C 20 67 65 6E
	   65 72 61 74 65
	   20 61 20 6E 75
	   6D 62 65 72 20
	   6E 20 5B 33 20
	   2D 20 31 32 5D
	   20 61 6E 64 20
	   61 20 6E 75 6D
	   62 65 72 20 72
	   20 5B 31 20 2D
	   20 6E 5D 20 77
	   68 69 63 68 20
	   77 69 6C 6C 20
	   00
 00000082 62 65 20 75 73	intro_2			BYTE	"be used to calculate the number of combinations of r items taken from a set ",0	; Intro 2
	   65 64 20 74 6F
	   20 63 61 6C 63
	   75 6C 61 74 65
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   63 6F 6D 62 69
	   6E 61 74 69 6F
	   6E 73 20 6F 66
	   20 72 20 69 74
	   65 6D 73 20 74
	   61 6B 65 6E 20
	   66 72 6F 6D 20
	   61 20 73 65 74
	   20 00
 000000CF 6F 66 20 6E 20	intro_3			BYTE	"of n items. The user is then prompted to answer the solution to the problem, ", 0	; Intro 3
	   69 74 65 6D 73
	   2E 20 54 68 65
	   20 75 73 65 72
	   20 69 73 20 74
	   68 65 6E 20 70
	   72 6F 6D 70 74
	   65 64 20 74 6F
	   20 61 6E 73 77
	   65 72 20 74 68
	   65 20 73 6F 6C
	   75 74 69 6F 6E
	   20 74 6F 20 74
	   68 65 20 70 72
	   6F 62 6C 65 6D
	   2C 20 00
 0000011D 61 6E 64 20 74	intro_4			BYTE	"and the correct answer will then be displayed after. The program will continue ", 0; Intro 4
	   68 65 20 63 6F
	   72 72 65 63 74
	   20 61 6E 73 77
	   65 72 20 77 69
	   6C 6C 20 74 68
	   65 6E 20 62 65
	   20 64 69 73 70
	   6C 61 79 65 64
	   20 61 66 74 65
	   72 2E 20 54 68
	   65 20 70 72 6F
	   67 72 61 6D 20
	   77 69 6C 6C 20
	   63 6F 6E 74 69
	   6E 75 65 20 00
 0000016D 75 6E 74 69 6C	intro_5			BYTE	"until the user expressively demands to stop.", 0									; Intro 5
	   20 74 68 65 20
	   75 73 65 72 20
	   65 78 70 72 65
	   73 73 69 76 65
	   6C 79 20 64 65
	   6D 61 6E 64 73
	   20 74 6F 20 73
	   74 6F 70 2E 00
 0000019A 45 43 3A 20 49	EC_intro_1		BYTE	"EC: I keep track of how many problems the user gets right vs. wrong",0				; EC 1
	   20 6B 65 65 70
	   20 74 72 61 63
	   6B 20 6F 66 20
	   68 6F 77 20 6D
	   61 6E 79 20 70
	   72 6F 62 6C 65
	   6D 73 20 74 68
	   65 20 75 73 65
	   72 20 67 65 74
	   73 20 72 69 67
	   68 74 20 76 73
	   2E 20 77 72 6F
	   6E 67 00
 000001DE 45 43 3A 20 49	EC_intro_2		BYTE	"EC: I utalise the floating point operators and registers for calculations", 0		; EC 2
	   20 75 74 61 6C
	   69 73 65 20 74
	   68 65 20 66 6C
	   6F 61 74 69 6E
	   67 20 70 6F 69
	   6E 74 20 6F 70
	   65 72 61 74 6F
	   72 73 20 61 6E
	   64 20 72 65 67
	   69 73 74 65 72
	   73 20 66 6F 72
	   20 63 61 6C 63
	   75 6C 61 74 69
	   6F 6E 73 00

 00000228 4E 75 6D 62 65	problem_1		BYTE	"Number of elements in the set: ", 0
	   72 20 6F 66 20
	   65 6C 65 6D 65
	   6E 74 73 20 69
	   6E 20 74 68 65
	   20 73 65 74 3A
	   20 00
 00000248 4E 75 6D 62 65	problem_2		BYTE	"Number of elements to choose from the set: ", 0
	   72 20 6F 66 20
	   65 6C 65 6D 65
	   6E 74 73 20 74
	   6F 20 63 68 6F
	   6F 73 65 20 66
	   72 6F 6D 20 74
	   68 65 20 73 65
	   74 3A 20 00

 00000274 50 6C 65 61 73	prompt_1		BYTE	"Please enter your solution to the problem: ", 0									; Prompt for user solution
	   65 20 65 6E 74
	   65 72 20 79 6F
	   75 72 20 73 6F
	   6C 75 74 69 6F
	   6E 20 74 6F 20
	   74 68 65 20 70
	   72 6F 62 6C 65
	   6D 3A 20 00
 000002A0 57 6F 75 6C 64	prompt_2		BYTE	"Would you like to practice another problem? (Y/N) ", 0								; as the user to keep going
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 70 72
	   61 63 74 69 63
	   65 20 61 6E 6F
	   74 68 65 72 20
	   70 72 6F 62 6C
	   65 6D 3F 20 28
	   59 2F 4E 29 20
	   00
 000002D3 49 6E 76 61 6C	failed_input_1	BYTE	"Invalid Responce! The given input was not an integer.", 0							; The user didn't input a number in for the solution
	   69 64 20 52 65
	   73 70 6F 6E 63
	   65 21 20 54 68
	   65 20 67 69 76
	   65 6E 20 69 6E
	   70 75 74 20 77
	   61 73 20 6E 6F
	   74 20 61 6E 20
	   69 6E 74 65 67
	   65 72 2E 00
 00000309 49 6E 76 61 6C	failed_input_2	BYTE	"Invalid Responce! The given input was not (Y/y, N/n). ", 0
	   69 64 20 52 65
	   73 70 6F 6E 63
	   65 21 20 54 68
	   65 20 67 69 76
	   65 6E 20 69 6E
	   70 75 74 20 77
	   61 73 20 6E 6F
	   74 20 28 59 2F
	   79 2C 20 4E 2F
	   6E 29 2E 20 00

 00000340 54 68 65 72 65	outro_1			BYTE	"There are ", 0
	   20 61 72 65 20
	   00
 0000034B 20 63 6F 6D 62	outro_2			BYTE	" combinations of ", 0
	   69 6E 61 74 69
	   6F 6E 73 20 6F
	   66 20 00
 0000035D 20 69 74 65 6D	outro_3			BYTE	" items from a set of ", 0
	   73 20 66 72 6F
	   6D 20 61 20 73
	   65 74 20 6F 66
	   20 00
 00000373 2E 20 54 68 61	outro_4			BYTE	". That is correct!", 0
	   74 20 69 73 20
	   63 6F 72 72 65
	   63 74 21 00
 00000386 54 68 61 6E 6B	finished		BYTE	"Thank you for using my program! Goodbye.", 0										; Thank the user and say goodbye by name input
	   20 79 6F 75 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   21 20 47 6F 6F
	   64 62 79 65 2E
	   00


 = 0000000C			nMAXNUM			=		12																					; The maximum range for n
 = 00000003			nMINNUM			=		3																					; The minimum range for n
 = 00000001			rMINNUM			=		1																					; The lowest number that can be generated for r
 000003AF 00000000		problemNum		DWORD	0
 000003B3 00000000		problemsRight	DWORD	0
 000003B7 00000000		n				DWORD	?
 000003BB 00000000		r				DWORD	?
 000003BF 00000000		answer			DWORD	?
 000003C3  0000000A [		userinput		BYTE	10 DUP(0)
	    00
	   ]


				;---------------------------------------------------------------;
				;	Macro mPrintString replaces having to move a byte to edx	;
				;	and call writeString with only one line. also allows for	;
				;	pretty lazy debuging which is a plus.						;
				;	THIS METHOD ONLY WORKS WITH VARAIBLES						;
				;---------------------------------------------------------------;
				mWriteString	MACRO	buffer:REQ
					push	edx
					mov		edx, OFFSET buffer
					call	WriteString
					pop		edx
				ENDM

				;---------------------------------------------------------------;
				;	Macro mWriteStringLn is the same as mWriteString but adds	;
				;	a new line after the printed text so you don't have to write;
				;	a new line call in the main functions.						;
				;---------------------------------------------------------------;
				mWriteStringLn	MACRO	buffer:REQ
					mWriteString	buffer
					call	CrLf
				ENDM

				mWriteDec		MACRO	decimal
					push	eax
					mov		eax, decimal
					call	WriteDec
					pop		eax
				ENDM

				;---------------------------------------------------------------;
				;	Macro mWrite lets you write a string to the output without	;
				;	pre-emptively defining it, I.E in quotes you can write		;
				;	anything to the output.										;
				;---------------------------------------------------------------;
				mWrite		MACRO	text
					LOCAL	string
					.data
					string	BYTE	text, 0

					.code
					push	edx
					mov		edx, OFFSET string
					call	WriteString
					pop		edx
				ENDM

				;---------------------------------------------------------------;
				;	Macro mWriteLn is the same as mWrite but adds a new line	;
				;	call at the end so you don't have to write on in the code	;
				;	section of the functions.									;
				;---------------------------------------------------------------;
				mWriteLn	MACRO	text
					mWrite	text
					call	CrLf
				ENDM

				;------------------------;
				;    Code Declaration    ;
				; This section is where	 ;
				; the bulk of the program;
				; is going to be writen  ;
				;------------------------;
 00000000			.code
				;---------------------------------------------------------------;
				;	main PROC will be called once the program is run, this		;
				;	is where we can call other processes so that we aren't		;
				;	crowded into the main function like this (GROSS), so we		;
				;	will implement this into further projects.					;
				;---------------------------------------------------------------;
 00000000			main	PROC
 00000000  E8 00000000 E			call	Randomize						; set the time seed for the randomize functions in order to keep the generator psuedo-random

					;-----------Display Program Intro-----------;
 00000005  E8 00000056				call	intro

 0000000A					NewProblem:
					;-----------Generate A Problem--------------;
 0000000A  FF 35 000003B7 R			push	n								; +24
 00000010  FF 35 000003BB R			push	r								; +20
 00000016  68 000003BF R			push	OFFSET	answer					; +16
 0000001B  68 000003AF R			push	OFFSET	problemNum				; +12
 00000020  68 000003B3 R			push	OFFSET	problemsRight			; +8
 00000025  E8 000000C9				call	showProblem

					;-----------Get User Input------------------;
 0000002A  FF 35 000003B7 R			push	n								; +24
 00000030  FF 35 000003BB R			push	r								; +20
 00000036  68 000003B3 R			push	OFFSET	problemsRight			; +16
 0000003B  68 000003C3 R			push	OFFSET	userinput				; +12
 00000040  68 000003BF R			push	OFFSET	answer					; +8
 00000045  E8 000001D8				call	getData							; Change to Int for temp solution, or just getData for true finished product

					;------------End Of The Program-------------;
 0000004A  68 000003C3 R			push	OFFSET	userinput				; +8
 0000004F  E8 00000336				call	restart

 00000054  83 F8 01				cmp		eax, 1
 00000057  74 B1				je		NewProblem
					exit										; close program, return to OS
 00000059  6A 00	   *	    push   +000000000h
 0000005B  E8 00000000 E   *	    call   ExitProcess
 00000060			main	ENDP									; the main PROC is finished, this symbolyses that we are done with the proc

				;---------------------------------------------------------------;
				;	The intro procedure will be called right off the bat, sort	;
				;	of like before using procedures. This will allow to keep	;
				;	the main function clean and organized, making debugging		;
				;	easier! This function litterally just calls all intro		;
				;	scripts.													;
				;	Parameters: program, intro_1, intro_2, intro_3, intro_4,	;
				;	intro_5, EC_intro_1, EC_intro_2								;
				;	Returns: n/a												;
				;	Pre-Conditions: called varaibles must be real strings		;
				;---------------------------------------------------------------;
 00000060			intro	PROC
 00000060  B8 00000017			mov		eax, lightGray + (blue * 16)		; color varaibles consist of: black, white, brown, yellow, blue, green, cyan, red, magenta, gray, lightBlue, lightGreen, lightCyan, lightRed, lightMagenta, and lightGray.
 00000065  E8 00000000 E		call	setTextColor						; EXTRA CREDIT: change background and foreground colors

					mWriteStringLn	project
 0000006A  52		     2		push	edx
 0000006B  BA 00000000 R     2		mov		edx, OFFSET project
 00000070  E8 00000000 E     2		call	WriteString
 00000075  5A		     2		pop		edx
 00000076  E8 00000000 E     1		call	CrLf
					mWriteStringLn	intro_1
 0000007B  52		     2		push	edx
 0000007C  BA 00000031 R     2		mov		edx, OFFSET intro_1
 00000081  E8 00000000 E     2		call	WriteString
 00000086  5A		     2		pop		edx
 00000087  E8 00000000 E     1		call	CrLf
					mWriteStringLn	intro_2
 0000008C  52		     2		push	edx
 0000008D  BA 00000082 R     2		mov		edx, OFFSET intro_2
 00000092  E8 00000000 E     2		call	WriteString
 00000097  5A		     2		pop		edx
 00000098  E8 00000000 E     1		call	CrLf
					mWriteStringLn	intro_3
 0000009D  52		     2		push	edx
 0000009E  BA 000000CF R     2		mov		edx, OFFSET intro_3
 000000A3  E8 00000000 E     2		call	WriteString
 000000A8  5A		     2		pop		edx
 000000A9  E8 00000000 E     1		call	CrLf
					mWriteStringLn	intro_4
 000000AE  52		     2		push	edx
 000000AF  BA 0000011D R     2		mov		edx, OFFSET intro_4
 000000B4  E8 00000000 E     2		call	WriteString
 000000B9  5A		     2		pop		edx
 000000BA  E8 00000000 E     1		call	CrLf
					mWriteStringLn	intro_5
 000000BF  52		     2		push	edx
 000000C0  BA 0000016D R     2		mov		edx, OFFSET intro_5
 000000C5  E8 00000000 E     2		call	WriteString
 000000CA  5A		     2		pop		edx
 000000CB  E8 00000000 E     1		call	CrLf
					mWriteStringLn	EC_intro_1
 000000D0  52		     2		push	edx
 000000D1  BA 0000019A R     2		mov		edx, OFFSET EC_intro_1
 000000D6  E8 00000000 E     2		call	WriteString
 000000DB  5A		     2		pop		edx
 000000DC  E8 00000000 E     1		call	CrLf
					mWriteStringLn	EC_intro_2
 000000E1  52		     2		push	edx
 000000E2  BA 000001DE R     2		mov		edx, OFFSET EC_intro_2
 000000E7  E8 00000000 E     2		call	WriteString
 000000EC  5A		     2		pop		edx
 000000ED  E8 00000000 E     1		call	CrLf

 000000F2  C3				ret
 000000F3			intro	ENDP

				;---------------------------------------------------------------;
				;	The generateProblem procedure will generate the 2 numbers	;
				;	in the problem, and then print the question to the screen.	;
				;	The procedure will also solve the problem itself, and then	;
				;	jump to the next procedure to wait for user answer to cross	;
				;	check answers and see if the user is correct.				;
				;	Parameters: n, r, answer, problemNum, problemsRight			;
				;	Returns: n, r, and answer values to their address			;
				;	Pre-Conditions: none										;
				;---------------------------------------------------------------;
 000000F3			showProblem	PROC
 000000F3  55				push	ebp
 000000F4  8B EC			mov		ebp, esp
 000000F6  83 EC 0C			sub		esp, 12								; make space for 3 local variables for factorial

 000000F9  8B 45 0C			mov		eax, [ebp + 12]						; offset to eax
 000000FC  8B 18			mov		ebx, [eax]							; value of offset to ebx
 000000FE  43				inc		ebx									; increase 
 000000FF  8B 45 0C			mov		eax, [ebp + 12]						; offset to eax
 00000102  89 18			mov		[eax], ebx							; value to value of offset

					mWrite			"Problem "
 000003CD		     1		.data
 000003CD 50 72 6F 62 6C     1		??0000	BYTE	"Problem ", 0
	   65 6D 20 00
 00000104		     1		.code
 00000104  52		     1		push	edx
 00000105  BA 000003CD R     1		mov		edx, OFFSET ??0000
 0000010A  E8 00000000 E     1		call	WriteString
 0000010F  5A		     1		pop		edx
 00000110  8B 45 0C			mov				eax, [ebp + 12]
					mWriteDec		[eax]						; problemNum
 00000113  50		     1		push	eax
 00000114  8B 00	     1		mov		eax, [eax]
 00000116  E8 00000000 E     1		call	WriteDec
 0000011B  58		     1		pop		eax


					mWrite			" ("
 000003D6		     1		.data
 000003D6 20 28 00	     1		??0001	BYTE	" (", 0
 0000011C		     1		.code
 0000011C  52		     1		push	edx
 0000011D  BA 000003D6 R     1		mov		edx, OFFSET ??0001
 00000122  E8 00000000 E     1		call	WriteString
 00000127  5A		     1		pop		edx
 00000128  8B 45 08			mov			eax, [ebp + 8]
					mWriteDec	[eax]
 0000012B  50		     1		push	eax
 0000012C  8B 00	     1		mov		eax, [eax]
 0000012E  E8 00000000 E     1		call	WriteDec
 00000133  58		     1		pop		eax
					mWrite		"/"
 000003D9		     1		.data
 000003D9 2F 00		     1		??0002	BYTE	"/", 0
 00000134		     1		.code
 00000134  52		     1		push	edx
 00000135  BA 000003D9 R     1		mov		edx, OFFSET ??0002
 0000013A  E8 00000000 E     1		call	WriteString
 0000013F  5A		     1		pop		edx
 00000140  8B 45 0C			mov			eax, [ebp + 12]
 00000143  8B 18			mov			ebx, [eax]
 00000145  4B				dec			ebx
					mWriteDec	ebx
 00000146  50		     1		push	eax
 00000147  8B C3	     1		mov		eax, ebx
 00000149  E8 00000000 E     1		call	WriteDec
 0000014E  58		     1		pop		eax

					mWriteLn	" answered correct)"
 000003DB		     2		.data
 000003DB 20 61 6E 73 77     2		??0003	BYTE	" answered correct)", 0
	   65 72 65 64 20
	   63 6F 72 72 65
	   63 74 29 00
 0000014F		     2		.code
 0000014F  52		     2		push	edx
 00000150  BA 000003DB R     2		mov		edx, OFFSET ??0003
 00000155  E8 00000000 E     2		call	WriteString
 0000015A  5A		     2		pop		edx
 0000015B  E8 00000000 E     1		call	CrLf

					mWriteString	problem_1
 00000160  52		     1		push	edx
 00000161  BA 00000228 R     1		mov		edx, OFFSET problem_1
 00000166  E8 00000000 E     1		call	WriteString
 0000016B  5A		     1		pop		edx

 0000016C  B8 0000000C			mov		eax, nMAXNUM						; set the max to eax
 00000171  83 E8 03			sub		eax, nMINNUM						; subtract the lowest from eax (this will give us a range of 1 to (max-min))
 00000174  E8 00000000 E		call	RandomRange							; generate random number in range (1 to (max-min))
 00000179  83 C0 03			add		eax, nMINNUM						; add lowest to generated number (this fixes the range to be from min to max)
 0000017C  A3 000003B7 R		mov		n, eax
 00000181  89 45 18			mov		[ebp + 24], eax						; move the n value to the stack

 00000184  E8 00000000 E		call	WriteDec							; this prints our N value to the screen

 00000189  E8 00000000 E		call	CrLf
					mWriteString	problem_2
 0000018E  52		     1		push	edx
 0000018F  BA 00000248 R     1		mov		edx, OFFSET problem_2
 00000194  E8 00000000 E     1		call	WriteString
 00000199  5A		     1		pop		edx

 0000019A  83 E8 01			sub		eax, rMINNUM						; subtract the lowest from eax (this will give us a range of 1 to (max-min))
 0000019D  E8 00000000 E		call	RandomRange							; generate random number in range (1 to (max-min))
 000001A2  83 C0 01			add		eax, rMINNUM						; add lowest to generated number (this fixes the range to be from min to max)
 000001A5  A3 000003BB R		mov		r, eax
 000001AA  89 45 14			mov		[ebp + 20], eax						; move the r value to the stack

 000001AD  E8 00000000 E		call	WriteDec							; this prints our R value to the screen
 000001B2  E8 00000000 E		call	CrLf

 000001B7  E8 00000006			call	combinations						; this will add 4 bytes to the index distance of the addresses (to compensate for return address)
					
 000001BC  8B E5			mov		esp, ebp							; remove locals from stack
 000001BE  5D				pop		ebp
 000001BF  C2 0022			ret		34
 000001C2			showProblem	ENDP

				;---------------------------------------------------------------;
				;	The combinations process calculates (n!)/(r!(n-r)!), and	;
				;	stores the value in result. It will call factorial process	;
				;	3 times, for n!, r!, and (n-r)! respectively, then multiply	;
				;	and divide as needed.										;
				;	Parameters: n, r as values, answer as reference				;
				;	Returns: the problems calculation value to answer			;
				;	Pre-Conditions, n and r are real integer values				;
				;---------------------------------------------------------------;
 000001C2			combinations	PROC

					;------------------N!-----------------------;
 000001C2  FF 75 18			push	[ebp + 24]							; push the N value to the stack [ebp + 8] in factorial
 000001C5  E8 00000036			call	factorial							; returns the N! to eax
 000001CA  89 45 FC			mov		DWORD PTR [ebp - 4], eax			; store in local var 1

					;------------------R!-----------------------;
 000001CD  FF 75 14			push	[ebp + 20]							; push the R value to the stack [ebp + 8] in factorial
 000001D0  E8 0000002B			call	factorial							; returns the R! to eax
 000001D5  89 45 F8			mov		DWORD PTR [ebp - 8], eax			; store in local var 2

					;-----------------(N-R)!--------------------;
 000001D8  8B 45 18			mov		eax, [ebp + 24]						; The N value
 000001DB  8B 5D 14			mov		ebx, [ebp + 20]						; The R value
 000001DE  2B C3			sub		eax, ebx							; N - R Value
 000001E0  50				push	eax
 000001E1  E8 0000001A			call	factorial							; returns the (N - R)! to eax
 000001E6  89 45 F4			mov		DWORD PTR [ebp - 12], eax			; store in local var 3

					;now for the answer
					;		n!
					;	----------
					;	r!(n - r)!

 000001E9  8B 45 F8			mov		eax, DWORD PTR [ebp - 8]			; R!
 000001EC  8B 5D F4			mov		ebx, DWORD PTR [ebp - 12]			; (N - R)!
 000001EF  F7 E3			mul		ebx									; R! * (N - R)!

 000001F1  8B D8			mov		ebx, eax							; set bottom value to divisor
 000001F3  8B 45 FC			mov		eax, DWORD PTR [ebp - 4]			; N!
 000001F6  F7 F3			div		ebx									; (n!)/(r!(n-r)!)			answer stored in eax

 000001F8  8B 5D 10			mov		ebx, [ebp + 16]						; answer offset to ebx
 000001FB  89 03			mov		[ebx], eax							; move answer to the stack value

 000001FD  C2 000C			ret		12
 00000200			combinations	ENDP

				;---------------------------------------------------------------;
				;	The factorial procedure will take an input on the stack, i,	;
				;	and recursively multiply itself until it has reached 1.		;
				;	Parameters: i as current factorial, iS as factorial sum		;
				;	returns: EAX = value of the factorial						;
				;	Pre-Conditions: i as a valid integer.						;
				;---------------------------------------------------------------;
 00000200			factorial	PROC
 00000200  55				push	ebp
 00000201  8B EC			mov		ebp, esp
					
 00000203  8B 45 08			mov		eax, [ebp + 8]						; the designated stack location for the index value
 00000206  83 F8 00			cmp		eax, 0								; check to see if index > 0
 00000209  77 07			ja		RecursiveCall						; i > 0
 0000020B  B8 00000001			mov		eax, 1
 00000210  EB 0C			jmp		endRecursion						; we need to loop back to the first call

 00000212				RecursiveCall:
 00000212  48					dec		eax								; i - 1
 00000213  50					push	eax								; used as the next layer of recursions new index
 00000214  E8 FFFFFFE7				call	factorial

 00000219				Return:										; only called when we keep looping back layers of recursion
 00000219  8B 5D 08				mov		ebx, [ebp + 8]					; get index
 0000021C  F7 E3				mul		ebx								; prod * index

 0000021E				endRecursion:
 0000021E  5D					pop		ebp								; remove the current layer of recursion's ebp placer
 0000021F  C2 0004				ret		4								; clear the dedicated stack bytes for the index value
 00000222			factorial	ENDP

				;---------------------------------------------------------------;
				;	The getData procedure will get the user input as a string	;
				;	and verify the input was an integer. It will then compare	;
				;	the user input to the answer of the problem, and reply		;
				;	accordingly.												;
				;	Parameters: prompt_1										;
				;	Returns: if user answer was correct							;
				;	Pre-Condition: answer should be a valid integer				;
				;---------------------------------------------------------------;
 00000222			getData PROC
 00000222  55				push    ebp
 00000223  8B EC			mov     ebp,esp
 00000225  83 EC 08			sub		esp, 8								; 2 local varaibles

 00000228				tryAgain:
						mWriteString   prompt_1
 00000228  52		     1		push	edx
 00000229  BA 00000274 R     1		mov		edx, OFFSET prompt_1
 0000022E  E8 00000000 E     1		call	WriteString
 00000233  5A		     1		pop		edx
 00000234  8B 55 0C				mov     edx, [ebp + 12]					; move OFFSET of temp to receive string of integers
 00000237  B9 0000000C				mov     ecx, 12
 0000023C  E8 00000000 E			call    ReadString
 00000241  83 F8 0A				cmp     eax, 10							; user input was a number larger than 10 bytes
 00000244  7F 51				jg      invalidInput

 00000246  8B C8				mov     ecx, eax						; loop through each char in input
 00000248  8B 75 0C				mov     esi, [ebp + 12]					; point at char in string
 0000024B  BA 00000000				mov		edx, 0
 00000250  89 55 F8				mov		[ebp - 8], edx					; start accumulation at 0

 00000253				loopString:									; loop validated each char in the input
 00000253  8A 06				mov     al, [esi]						; move value of char into al register
 00000255  46					inc     esi								; point to next char in string
 00000256  2C 30				sub     al, 48d							; subtract 48 from ASCII value of char to get integer  

 00000258  3C 00				cmp     al ,0							; make sure char is >= 0
 0000025A  7C 3B				jl      invalidInput
 0000025C  3C 09				cmp     al, 9							; or <= 9
 0000025E  7F 37				jg      invalidInput
						; in order to convert, we want to do (i = curNum, n = char index, i * (10 ^ n)
						; this will allow us to add each additional loop value to edx, to end up with converted string
 00000260  89 45 FC				mov		[ebp - 4], eax
						;push	eax								; ebp - 4
 00000263  8B D9				mov		ebx, ecx						; n = ecx
 00000265  4B					dec		ebx
 00000266  B8 00000001				mov		eax, 1							; (10 ^ n) = eax
 0000026B  BF 0000000A				mov		edi, 10
 00000270					PowerOf:
 00000270  83 FB 00					cmp		ebx, 0
 00000273  74 08					je		PowerOfDone
 00000275  F7 E7					mul		edi							; eax * 10
 00000277  4B						dec		ebx							; n - 1
 00000278  83 FB 00					cmp		ebx, 0
 0000027B  7F F3					jg		PowerOf
 0000027D					PowerOfDone:
						
						;eax now = (10 ^ n)
 0000027D  8B D8				mov		ebx, eax						; temporarily hold (10 ^ n) in ebx
 0000027F  8B 45 FC				mov		eax, [ebp - 4]					; set eax back to the input char value

 00000282  0F B6 F8				movzx	edi, al							; move value of al to edi as temp register
 00000285  8B C3				mov		eax, ebx						; move (10 ^ n) back to eax
 00000287  F7 E7				mul		edi								; eax = i * (10 ^ n)
 00000289  33 D2				xor		edx, edx
 0000028B  8B 55 F8				mov		edx, [ebp - 8]
 0000028E  03 D0				add		edx, eax						; add eax to accumulation total
 00000290  89 55 F8				mov		[ebp - 8], edx

 00000293  E2 BE				loop    loopString
 00000295  EB 27				jmp     Verify

 00000297				invalidInput:								; reset registers and variables to 0
 00000297  B0 00				mov     al, 0
 00000299  B8 00000000				mov     eax, 0
 0000029E  8B 5D 08				mov     ebx, [ebp + 8]
 000002A1  89 03				mov     [ebx], eax
 000002A3  8B 5D 0C				mov     ebx, [ebp + 12]
 000002A6  89 03				mov     [ebx], eax       
						mWriteStringLn   failed_input_1
 000002A8  52		     2		push	edx
 000002A9  BA 000002D3 R     2		mov		edx, OFFSET failed_input_1
 000002AE  E8 00000000 E     2		call	WriteString
 000002B3  5A		     2		pop		edx
 000002B4  E8 00000000 E     1		call	CrLf
 000002B9  E9 FFFFFF6A				jmp     tryAgain

 000002BE				Verify:
 000002BE  8B 45 08				mov		eax, [ebp + 8]					; answer
 000002C1  8B 18				mov		ebx, [eax]
 000002C3  3B DA				cmp		ebx, edx						; compare answer to input result
 000002C5  74 02				je		answerRight
 000002C7  75 66				jne		answerWrong


 000002C9				answerRight:
 000002C9  8B 45 08				mov				eax, [ebp + 8]
						mWrite			"There are "
 000003EE		     1		.data
 000003EE 54 68 65 72 65     1		??0004	BYTE	"There are ", 0
	   20 61 72 65 20
	   00
 000002CC		     1		.code
 000002CC  52		     1		push	edx
 000002CD  BA 000003EE R     1		mov		edx, OFFSET ??0004
 000002D2  E8 00000000 E     1		call	WriteString
 000002D7  5A		     1		pop		edx
						mWriteDec		[eax]
 000002D8  50		     1		push	eax
 000002D9  8B 00	     1		mov		eax, [eax]
 000002DB  E8 00000000 E     1		call	WriteDec
 000002E0  58		     1		pop		eax
						mWrite			" combinations of "
 000003F9		     1		.data
 000003F9 20 63 6F 6D 62     1		??0005	BYTE	" combinations of ", 0
	   69 6E 61 74 69
	   6F 6E 73 20 6F
	   66 20 00
 000002E1		     1		.code
 000002E1  52		     1		push	edx
 000002E2  BA 000003F9 R     1		mov		edx, OFFSET ??0005
 000002E7  E8 00000000 E     1		call	WriteString
 000002EC  5A		     1		pop		edx
						mWriteDec		[ebp + 20]
 000002ED  50		     1		push	eax
 000002EE  8B 45 14	     1		mov		eax, [ebp + 20]
 000002F1  E8 00000000 E     1		call	WriteDec
 000002F6  58		     1		pop		eax
						mWrite			" items from a set of "
 0000040B		     1		.data
 0000040B 20 69 74 65 6D     1		??0006	BYTE	" items from a set of ", 0
	   73 20 66 72 6F
	   6D 20 61 20 73
	   65 74 20 6F 66
	   20 00
 000002F7		     1		.code
 000002F7  52		     1		push	edx
 000002F8  BA 0000040B R     1		mov		edx, OFFSET ??0006
 000002FD  E8 00000000 E     1		call	WriteString
 00000302  5A		     1		pop		edx
						mWriteDec		[ebp + 24]
 00000303  50		     1		push	eax
 00000304  8B 45 18	     1		mov		eax, [ebp + 24]
 00000307  E8 00000000 E     1		call	WriteDec
 0000030C  58		     1		pop		eax
						mWriteLn		". You're correct!"
 00000421		     2		.data
 00000421 2E 20 59 6F 75     2		??0007	BYTE	". You're correct!", 0
	   27 72 65 20 63
	   6F 72 72 65 63
	   74 21 00
 0000030D		     2		.code
 0000030D  52		     2		push	edx
 0000030E  BA 00000421 R     2		mov		edx, OFFSET ??0007
 00000313  E8 00000000 E     2		call	WriteString
 00000318  5A		     2		pop		edx
 00000319  E8 00000000 E     1		call	CrLf
 0000031E  8B 5D 10				mov				ebx, [ebp + 16]
 00000321  8B 03				mov				eax, [ebx]
 00000323  40					inc				eax
 00000324  8B 5D 10				mov				ebx, [ebp + 16]
 00000327  89 03				mov				[ebx], eax

 00000329  8B E5				mov		esp, ebp						; remove locals from stack
 0000032B  5D					pop		ebp
 0000032C  C2 0014				ret		20

 0000032F				answerWrong:
 0000032F  8B 45 08				mov				eax, [ebp + 8]
						mWrite			"There are "
 00000433		     1		.data
 00000433 54 68 65 72 65     1		??0008	BYTE	"There are ", 0
	   20 61 72 65 20
	   00
 00000332		     1		.code
 00000332  52		     1		push	edx
 00000333  BA 00000433 R     1		mov		edx, OFFSET ??0008
 00000338  E8 00000000 E     1		call	WriteString
 0000033D  5A		     1		pop		edx
						mWriteDec		[eax]
 0000033E  50		     1		push	eax
 0000033F  8B 00	     1		mov		eax, [eax]
 00000341  E8 00000000 E     1		call	WriteDec
 00000346  58		     1		pop		eax
						mWrite			" combinations of "
 0000043E		     1		.data
 0000043E 20 63 6F 6D 62     1		??0009	BYTE	" combinations of ", 0
	   69 6E 61 74 69
	   6F 6E 73 20 6F
	   66 20 00
 00000347		     1		.code
 00000347  52		     1		push	edx
 00000348  BA 0000043E R     1		mov		edx, OFFSET ??0009
 0000034D  E8 00000000 E     1		call	WriteString
 00000352  5A		     1		pop		edx
						mWriteDec		[ebp + 20]
 00000353  50		     1		push	eax
 00000354  8B 45 14	     1		mov		eax, [ebp + 20]
 00000357  E8 00000000 E     1		call	WriteDec
 0000035C  58		     1		pop		eax
						mWrite			" items from a set of "
 00000450		     1		.data
 00000450 20 69 74 65 6D     1		??000A	BYTE	" items from a set of ", 0
	   73 20 66 72 6F
	   6D 20 61 20 73
	   65 74 20 6F 66
	   20 00
 0000035D		     1		.code
 0000035D  52		     1		push	edx
 0000035E  BA 00000450 R     1		mov		edx, OFFSET ??000A
 00000363  E8 00000000 E     1		call	WriteString
 00000368  5A		     1		pop		edx
						mWriteDec		[ebp + 24]
 00000369  50		     1		push	eax
 0000036A  8B 45 18	     1		mov		eax, [ebp + 24]
 0000036D  E8 00000000 E     1		call	WriteDec
 00000372  58		     1		pop		eax
						mWriteLn		". You're incorrect!"
 00000466		     2		.data
 00000466 2E 20 59 6F 75     2		??000B	BYTE	". You're incorrect!", 0
	   27 72 65 20 69
	   6E 63 6F 72 72
	   65 63 74 21 00
 00000373		     2		.code
 00000373  52		     2		push	edx
 00000374  BA 00000466 R     2		mov		edx, OFFSET ??000B
 00000379  E8 00000000 E     2		call	WriteString
 0000037E  5A		     2		pop		edx
 0000037F  E8 00000000 E     1		call	CrLf

 00000384  8B E5				mov		esp, ebp						; remove locals from stack
 00000386  5D					pop		ebp
 00000387  C2 0014				ret		20
 0000038A			getData	ENDP

				;---------------------------------------------------------------;
				;	The restart procedure will test to see if the user is		;
				;	wanting to run the process one more time, which is 1		;
				;	is inputed, will jump the user back into the				;
				;	introduction where the user will be asked to input more		;
				;	integers. If anything else is answered, the program will	;
				;	exit to the OS.												;
				;	Parameters: userinput										;
				;	Returns: eax = 1 if user wishes to restart					;
				;	Pre-Conditions: none										;
				;---------------------------------------------------------------;
 0000038A			restart		PROC
 0000038A  55				push	ebp
 0000038B  8B EC			mov		ebp, esp
 0000038D				startOfCall:
						mWriteString	prompt_2
 0000038D  52		     1		push	edx
 0000038E  BA 000002A0 R     1		mov		edx, OFFSET prompt_2
 00000393  E8 00000000 E     1		call	WriteString
 00000398  5A		     1		pop		edx
					
 00000399  8B 55 08				mov		edx, [ebp + 8]					; userinput
 0000039C  B9 0000000A				mov		ecx, 10
 000003A1  E8 00000000 E			call	ReadString

 000003A6  8B 75 08				mov		esi, [ebp + 8]
 000003A9  AC					lodsb									; load string as byte to ax 8 bit register
 000003AA  66| 83 F8 59				cmp		ax, 89d							; compare input to Y decimal value
 000003AE  74 14				je		startOver
 000003B0  66| 83 F8 79				cmp		ax, 121d						; compare input to y decimal value
 000003B4  74 0E				je		startOver
 000003B6  66| 83 F8 4E				cmp		ax, 78d							; compare input to N decimal value
 000003BA  74 1B				je		endProg
 000003BC  66| 83 F8 6E				cmp		ax, 110d						; compare input to n decimal value
 000003C0  74 15				je		endProg
 000003C2  EB 32				jmp		failedInput						; some other input

 000003C4				startOver:
 000003C4  B8 00000001				mov		eax, 1
 000003C9  E8 00000000 E			call	CrLf
 000003CE  E8 00000000 E			call	CrLf
 000003D3  5D					pop		ebp
 000003D4  C2 0004				ret		4

 000003D7				endProg:
 000003D7  B8 00000000				mov		eax, 0
 000003DC  E8 00000000 E			call	CrLf
						mWriteStringLn	finished
 000003E1  52		     2		push	edx
 000003E2  BA 00000386 R     2		mov		edx, OFFSET finished
 000003E7  E8 00000000 E     2		call	WriteString
 000003EC  5A		     2		pop		edx
 000003ED  E8 00000000 E     1		call	CrLf
 000003F2  5D					pop		ebp
 000003F3  C2 0004				ret		4

 000003F6				failedInput:
						mWriteStringLn	failed_input_2
 000003F6  52		     2		push	edx
 000003F7  BA 00000309 R     2		mov		edx, OFFSET failed_input_2
 000003FC  E8 00000000 E     2		call	WriteString
 00000401  5A		     2		pop		edx
 00000402  E8 00000000 E     1		call	CrLf
 00000407  EB 84				jmp		startOfCall

					
 00000409			restart		ENDP

				END main										; the symbolyses that the main program is finished
Microsoft (R) Macro Assembler Version 14.16.27027.1	    03/12/19 17:45:29
Program 6B		(Project6B.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mWriteDec  . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteStringLn . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000047A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000409 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
combinations . . . . . . . . . .	P Near	 000001C2 _TEXT	Length= 0000003E Public STDCALL
factorial  . . . . . . . . . . .	P Near	 00000200 _TEXT	Length= 00000022 Public STDCALL
  RecursiveCall  . . . . . . . .	L Near	 00000212 _TEXT	
  Return . . . . . . . . . . . .	L Near	 00000219 _TEXT	
  endRecursion . . . . . . . . .	L Near	 0000021E _TEXT	
getData  . . . . . . . . . . . .	P Near	 00000222 _TEXT	Length= 00000168 Public STDCALL
  tryAgain . . . . . . . . . . .	L Near	 00000228 _TEXT	
  loopString . . . . . . . . . .	L Near	 00000253 _TEXT	
  PowerOf  . . . . . . . . . . .	L Near	 00000270 _TEXT	
  PowerOfDone  . . . . . . . . .	L Near	 0000027D _TEXT	
  invalidInput . . . . . . . . .	L Near	 00000297 _TEXT	
  Verify . . . . . . . . . . . .	L Near	 000002BE _TEXT	
  answerRight  . . . . . . . . .	L Near	 000002C9 _TEXT	
  answerWrong  . . . . . . . . .	L Near	 0000032F _TEXT	
intro  . . . . . . . . . . . . .	P Near	 00000060 _TEXT	Length= 00000093 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000060 Public STDCALL
  NewProblem . . . . . . . . . .	L Near	 0000000A _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
restart  . . . . . . . . . . . .	P Near	 0000038A _TEXT	Length= 0000007F Public STDCALL
  startOfCall  . . . . . . . . .	L Near	 0000038D _TEXT	
  startOver  . . . . . . . . . .	L Near	 000003C4 _TEXT	
  endProg  . . . . . . . . . . .	L Near	 000003D7 _TEXT	
  failedInput  . . . . . . . . .	L Near	 000003F6 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showProblem  . . . . . . . . . .	P Near	 000000F3 _TEXT	Length= 000000CF Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 000003CD _DATA	
??0001 . . . . . . . . . . . . .	Byte	 000003D6 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 000003D9 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 000003DB _DATA	
??0004 . . . . . . . . . . . . .	Byte	 000003EE _DATA	
??0005 . . . . . . . . . . . . .	Byte	 000003F9 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 0000040B _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00000421 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 00000433 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 0000043E _DATA	
??000A . . . . . . . . . . . . .	Byte	 00000450 _DATA	
??000B . . . . . . . . . . . . .	Byte	 00000466 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
EC_intro_1 . . . . . . . . . . .	Byte	 0000019A _DATA	
EC_intro_2 . . . . . . . . . . .	Byte	 000001DE _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
answer . . . . . . . . . . . . .	DWord	 000003BF _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
failed_input_1 . . . . . . . . .	Byte	 000002D3 _DATA	
failed_input_2 . . . . . . . . .	Byte	 00000309 _DATA	
finished . . . . . . . . . . . .	Byte	 00000386 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_1  . . . . . . . . . . . .	Byte	 00000031 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00000082 _DATA	
intro_3  . . . . . . . . . . . .	Byte	 000000CF _DATA	
intro_4  . . . . . . . . . . . .	Byte	 0000011D _DATA	
intro_5  . . . . . . . . . . . .	Byte	 0000016D _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
nMAXNUM  . . . . . . . . . . . .	Number	 0000000Ch   
nMINNUM  . . . . . . . . . . . .	Number	 00000003h   
n  . . . . . . . . . . . . . . .	DWord	 000003B7 _DATA	
outro_1  . . . . . . . . . . . .	Byte	 00000340 _DATA	
outro_2  . . . . . . . . . . . .	Byte	 0000034B _DATA	
outro_3  . . . . . . . . . . . .	Byte	 0000035D _DATA	
outro_4  . . . . . . . . . . . .	Byte	 00000373 _DATA	
problemNum . . . . . . . . . . .	DWord	 000003AF _DATA	
problem_1  . . . . . . . . . . .	Byte	 00000228 _DATA	
problem_2  . . . . . . . . . . .	Byte	 00000248 _DATA	
problemsRight  . . . . . . . . .	DWord	 000003B3 _DATA	
project  . . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 00000274 _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 000002A0 _DATA	
rMINNUM  . . . . . . . . . . . .	Number	 00000001h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
r  . . . . . . . . . . . . . . .	DWord	 000003BB _DATA	
userinput  . . . . . . . . . . .	Byte	 000003C3 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
