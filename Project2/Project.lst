Microsoft (R) Macro Assembler Version 14.16.27026.1	    01/20/19 21:22:42
Program 2		(Project2.asm			     Page 1 - 1


				TITLE Program 2		(Project2.asm)

				; Author: Bryce Hahn
				; Course/Project ID: CS 271 Project 2
				; Date: 1/11/2019
				; Description:
				;	This program will print out a Fibonacci sequence
				;		request the user to input how many Fibonacci numbers are
				;		to be printed. The prompt the user to enter a range these
				;		numbers will be calculated between [0-51] for example.	I
				;		will then process the inputs and ensure they are proper
				;		parameters. Print the numbers out, 5 per line with proper
				;		spacing to form left aligned collumns (EC) I also do 
				;		something incredible, I.E. changing the background and
				;		foreground colors (MORE EC PLZ)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;-----------------------;
				;    Var Declaration    ;
				;-----------------------;
 00000000			.data

 00000000 2D 09 20 46 69	project			BYTE	"-	 Fibonacci Numbers   --   Bryce Hahn  -", 0
	   62 6F 6E 61 63
	   63 69 20 4E 75
	   6D 62 65 72 73
	   20 20 20 2D 2D
	   20 20 20 42 72
	   79 63 65 20 48
	   61 68 6E 20 20
	   2D 00
 0000002A 57 65 6C 63 6F	intro_1			BYTE	"Welcome to the Fibonacci Calculator! I will take in a number to signify how ", 0	; Intro 1 
	   6D 65 20 74 6F
	   20 74 68 65 20
	   46 69 62 6F 6E
	   61 63 63 69 20
	   43 61 6C 63 75
	   6C 61 74 6F 72
	   21 20 49 20 77
	   69 6C 6C 20 74
	   61 6B 65 20 69
	   6E 20 61 20 6E
	   75 6D 62 65 72
	   20 74 6F 20 73
	   69 67 6E 69 66
	   79 20 68 6F 77
	   20 00
 00000077 6D 61 6E 79 20	intro_2			BYTE	"many Fibonacci terms you wish me to print.  Extra Credit: My background color ", 0	; Intro 2
	   46 69 62 6F 6E
	   61 63 63 69 20
	   74 65 72 6D 73
	   20 79 6F 75 20
	   77 69 73 68 20
	   6D 65 20 74 6F
	   20 70 72 69 6E
	   74 2E 20 20 45
	   78 74 72 61 20
	   43 72 65 64 69
	   74 3A 20 4D 79
	   20 62 61 63 6B
	   67 72 6F 75 6E
	   64 20 63 6F 6C
	   6F 72 20 00
 000000C6 61 6E 64 20 74	intro_3			BYTE	"and text color changes!", 0														; Intro 3
	   65 78 74 20 63
	   6F 6C 6F 72 20
	   63 68 61 6E 67
	   65 73 21 00
 000000DE 57 65 6C 63 6F	intro_4			BYTE	"Welcome, ", 0
	   6D 65 2C 20 00
 000000E8 50 6C 65 61 73	prompt_1		BYTE	"Please input your name: ", 0														; Prompt for users name firstly
	   65 20 69 6E 70
	   75 74 20 79 6F
	   75 72 20 6E 61
	   6D 65 3A 20 00
 00000101 50 6C 65 61 73	prompt_2		BYTE	"Please enter how many numbers you wish be printed (between 1 and 46): ", 0			; Prompt for fib numbers count
	   65 20 65 6E 74
	   65 72 20 68 6F
	   77 20 6D 61 6E
	   79 20 6E 75 6D
	   62 65 72 73 20
	   79 6F 75 20 77
	   69 73 68 20 62
	   65 20 70 72 69
	   6E 74 65 64 20
	   28 62 65 74 77
	   65 65 6E 20 31
	   20 61 6E 64 20
	   34 36 29 3A 20
	   00
 00000148 44 6F 20 79 6F	prompt_3		BYTE	"Do you want to run the program again? (enter 1 for yes)", 0						; Prompt the user to run again
	   75 20 77 61 6E
	   74 20 74 6F 20
	   72 75 6E 20 74
	   68 65 20 70 72
	   6F 67 72 61 6D
	   20 61 67 61 69
	   6E 3F 20 28 65
	   6E 74 65 72 20
	   31 20 66 6F 72
	   20 79 65 73 29
	   00
 00000180 54 68 65 20 65	failed_input_1	BYTE	"The entered number was above the provided range!", 0								; Warn the user that they can't input such a RIDICULOUSLY high number
	   6E 74 65 72 65
	   64 20 6E 75 6D
	   62 65 72 20 77
	   61 73 20 61 62
	   6F 76 65 20 74
	   68 65 20 70 72
	   6F 76 69 64 65
	   64 20 72 61 6E
	   67 65 21 00
 000001B1 54 68 65 20 65	failed_input_2	BYTE	"The entered number was bellow the provided range!", 0								; Warn the user that they can't input such a CRAZY low number
	   6E 74 65 72 65
	   64 20 6E 75 6D
	   62 65 72 20 77
	   61 73 20 62 65
	   6C 6C 6F 77 20
	   74 68 65 20 70
	   72 6F 76 69 64
	   65 64 20 72 61
	   6E 67 65 21 00
 000001E3 4F 75 74 70 75	outro_1			BYTE	"Outputting the Fibonacci Sequence:", 0												; Start the calc section with letting the user know it's printing
	   74 74 69 6E 67
	   20 74 68 65 20
	   46 69 62 6F 6E
	   61 63 63 69 20
	   53 65 71 75 65
	   6E 63 65 3A 00
 00000206 54 68 61 6E 6B	finished		BYTE	"Thank you for using my program! Goodbye, ", 0										; Thank the user and say goodbye by name input
	   20 79 6F 75 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   21 20 47 6F 6F
	   64 62 79 65 2C
	   20 00
 00000230 20 00			spacer			BYTE	" ", 0																				; Pre-allocated variable to properize the spacings of the outputs
 00000232 20 20 20 20 20	large_spacer	BYTE	"         ", 0
	   20 20 20 20 00

 = 0000002E			MAXFIB			=		46																					; The maximum amount of fib numbers that will be alloud to be calculated
 = 00000001			MINFIB			=		1																					; The minimum amount of fib numbers that will be alloud to be calculated (and that can be...)
 0000023C  00000015 [		userinput		BYTE	21 DUP(0)																			; Byte array for the username input
	    00
	   ]

 00000251 00000000		byteCount		DWORD	?																					; used for holding information about user inputting a string
 00000255 00000000		username		DWORD	?																					; User inputed name
 00000259 00000000		num_of_fibs		DWORD	?																					; User inputed number to be calculated
 0000025D 00000000		num_on_line		DWORD	?																					; Keep tabs on how many numbers have been printed on a single line
 00000261 00000000		current			DWORD	?																					; Keep tabs on the current calculated fib number in the loop
 00000265 00000000		last			DWORD	?																					; Keep tabs on the last fib number to calc the up next one
 00000269 00000000		tmp				DWORD	?																					; for swapping current and last fib numbers
 0000026D 00000000		loop_count		DWORD	?																					; var to keep track of loop iteration count
 00000271 0000000A		mult			DWORD	10																					; multiplier to see how many spaces to add
 00000275 00000000		keep_going		DWORD	?																					; User inputed responce to run again

				;------------------------;
				;    Code Declaration    ;
				; This section is where	 ;
				; the bulk of the program;
				; is going to be writen  ;
				;------------------------;
 00000000			.code
				;---------------------------------------------------------------;
				;	main PROC will be called once the program is run, this		;
				;	is where we can call other processes so that we aren't		;
				;	crowded into the main function like this (GROSS), so we		;
				;	will implement this into further projects.					;
				;---------------------------------------------------------------;
 00000000			main PROC
 00000000  B8 00000017				mov		eax, lightGray + (blue * 16); color varaibles consist of: black, white, brown, yellow, blue, green, cyan, red, magenta, gray, lightBlue, lightGreen, lightCyan, lightRed, lightMagenta, and lightGray.
 00000005  E8 00000000 E			call	setTextColor				; EXTRA CREDIT: change background and foreground colors
 0000000A  BA 0000002A R			mov		edx, OFFSET intro_1			; print the program introduction (Called only once when the program starts since the user doesn't need to see this after they restart)
 0000000F  E8 00000000 E			call	WriteString
 00000014  E8 00000000 E			call	CrLf						; new line
 00000019  BA 00000077 R			mov		edx, OFFSET intro_2			; print the program introduction part 2
 0000001E  E8 00000000 E			call	WriteString
 00000023  E8 00000000 E			call	CrLf						; new line
 00000028  BA 000000C6 R			mov		edx, OFFSET intro_3			; print the extra credit section of the intro
 0000002D  E8 00000000 E			call	WriteString
 00000032  E8 00000000 E			call	CrLf						; new line

				;---------------------------------------------------------------;
				;	The Inputs label will be the start of the program,			;
				;	where we will prompt the user to input their 2 integers		;
				;	into our num1 and num2 DWORDS. This will also be jumped		;
				;	back into when the user states they wish to restart the		;
				;	program.													;
				;---------------------------------------------------------------;
 00000037			Inputs:	
 00000037  BA 000000E8 R			mov		edx, OFFSET prompt_1		; prompt the user for their name
 0000003C  E8 00000000 E			call	WriteString
 00000041  BA 0000023C R			mov		edx, OFFSET userinput
 00000046  B9 00000015				mov		ecx, SIZEOF	userinput
 0000004B  E8 00000000 E			call	ReadString
 00000050  A3 00000251 R			mov		byteCount, eax

 00000055  BA 000000DE R			mov		edx, OFFSET intro_4
 0000005A  E8 00000000 E			call	WriteString
 0000005F  BA 0000023C R			mov		edx, OFFSET userinput
 00000064  E8 00000000 E			call	WriteString

 00000069  BA 00000101 R			mov		edx, OFFSET prompt_2		; prompt the user for how many fib numbers they wish printed
 0000006E  E8 00000000 E			call	CrLf
 00000073  E8 00000000 E			call	WriteString
 00000078  E8 00000000 E			call	ReadInt						; read in the user input
 0000007D  A3 00000259 R			mov		num_of_fibs, eax			; move the input val to num_of_fibs

 00000082  A1 00000259 R			mov		eax, num_of_fibs			; move the num_of_fibs to int reg
 00000087  83 F8 2E				cmp		eax, MAXFIB					; compare int reg val (num user wants to print) to the max val
 0000008A  7F 33				jg		HigherInput					; if greater than, jump to higher input failure label
 0000008C  83 F8 01				cmp		eax, MINFIB					; compare int reg val (num user wants to print) to the min val
 0000008F  7C 1A				jl		LowerInput					; if less than, jump to lower input failure label
 00000091  0F 84 0000010D			je		Case1						; if the user is equal to the min, aka 1, go to case 1
 00000097  83 F8 02				cmp		eax, 2						; if the user entered 2
 0000009A  0F 84 0000011F			je		Case2						; jump to special case 2
 000000A0  83 F8 03				cmp		eax, 3						; if the user entered 3
 000000A3  0F 84 00000145			je		Case3						; jump to special case 3
 000000A9  EB 28				jmp		Calculations				; else, its within min and max, so jump to calculations

				;---------------------------------------------------------------;
				;	The Lower/Higher Inputs labels will be jumped to when the 	;
				;	user inputs a faulty second integer, because it was above 	;
				;	the first given integer. This will warn the user to input 	;
				;	a proper lower int, then ask for a new int, and check if	;
				;	the new int is above num1. If successful, will jump the		;
				;	user to the calculations label.								;
				;---------------------------------------------------------------;
 000000AB			LowerInput:
 000000AB  BA 000001B1 R			mov		edx, OFFSET failed_input_2
 000000B0  E8 00000000 E			call	WriteString
 000000B5  E8 00000000 E			call	CrLf
 000000BA  E9 FFFFFF78				jmp		Inputs

 000000BF			HigherInput:
 000000BF  BA 00000180 R			mov		edx, OFFSET failed_input_1
 000000C4  E8 00000000 E			call	WriteString
 000000C9  E8 00000000 E			call	CrLf
 000000CE  E9 FFFFFF64				jmp		Inputs

				;---------------------------------------------------------------;
				;	The Calculations label will be the bulk of the process,		;
				;	where we calculate the different math operations, and		;
				;	output them (very smoothly with proper symbols) to the		;
				;	output.														;
				;---------------------------------------------------------------;
 000000D3			Calculations:
 000000D3  BA 000001E3 R			mov		edx, OFFSET outro_1
 000000D8  E8 00000000 E			call	WriteString					; output to the user we are printing the numbers now..
 000000DD  E8 00000000 E			call	CrLf
 000000E2  B8 00000001				mov		eax, 1
 000000E7  E8 00000000 E			call	WriteDec
 000000EC  BA 00000232 R			mov		edx, OFFSET large_spacer
 000000F1  E8 00000000 E			call	WriteString


 000000F6  8B 0D 00000259 R			mov		ecx, num_of_fibs			; set ecx to num_of_fibs for looping
 000000FC  C7 05 00000261 R			mov		current, 1					; always start off the sequence at 1
	   00000001
 00000106  C7 05 0000025D R			mov		num_on_line, 1				; always start off the sequence at 1 on the line
	   00000001
 00000110  C7 05 00000265 R			mov		last, 0						; start the last fib number off with 0 (0 + 1) = 1
	   00000000
 0000011A  C7 05 0000026D R			mov		loop_count, 1				; always start off the sequence at 1 (cause 1 is already printed)
	   00000001
 00000124					fib_loop:
 00000124  A1 00000265 R				mov		eax, last
 00000129  03 05 00000261 R				add		eax, current
 0000012F  E8 00000000 E				call	WriteDec

 00000134  A3 00000269 R				mov		tmp, eax				; next itteration eax value will be the current
 00000139  A1 00000261 R				mov		eax, current			; next itteration this will be last
 0000013E  A3 00000265 R				mov		last, eax				; FINAL: place the current itterations fib value into the next itterations last fib value
 00000143  A1 00000269 R				mov		eax, tmp				; put tmp back in eax
 00000148  A3 00000261 R				mov		current, eax			; FINAL: place the current itterations print value into the next itterations current fib value
							
							; EXTRA CREDIT: space out the 5 numbers into left aligned columns
 0000014D  B9 0000000B					mov		ecx, 11
 00000152  B8 00000001					mov		eax, 1
 00000157						space:
								;mul		mult
 00000157  3B D8						cmp		ebx, eax
								;jge		skip
 00000159  BA 00000230 R					mov		edx, OFFSET spacer	; move the spacing into string register
 0000015E  E8 00000000 E					call	WriteString			; add spacing
								;skip:
 00000163  E2 F2							loop	space			; couldn't get this to work due to the jump byte limitation :(

 00000165  83 05 0000025D R				add		num_on_line, 1			; add 1 to how many numbers of the sequence are printed on a line
	   01
 0000016C  83 3D 0000025D R				cmp		num_on_line, 5			; compare 5 to num_on_line
	   05
 00000173  74 02					je		reset_line				; if there are 5 on a line, reset to a new line
 00000175  7C 11					jl		finishingUP				; if not 5, finish up the loop

 00000177						reset_line:
 00000177  C7 05 0000025D R					mov		num_on_line, 0
	   00000000
 00000181  E8 00000000 E					call	CrLf
 00000186  EB 00						jmp		finishingUP

 00000188						finishingUP:
 00000188  83 05 0000026D R					add		loop_count, 1		; set our temp holder val to +1 so we can get one iteration closer to the fib num
	   01
 0000018F  A1 0000026D R					mov		eax, loop_count
 00000194  3B 05 00000259 R					cmp		eax, num_of_fibs	; if eax >= num_of_fibs
 0000019A  0F 8D 0000009B					jge		RunAgain			; jump out of calculations and ask to run again?
 000001A0  7C 00						jl		endOfLoop

 000001A2						endOfLoop:
 000001A2  E2 80						loop	fib_loop
							

				;---------------------------------------------------------------;
				;	The Case1 label will only be called if the user enteres		;
				;	1 as their number of fibonacci sequencings to print.		;
				;---------------------------------------------------------------;
 000001A4			Case1:
 000001A4  C7 05 00000261 R		mov		current, 1					; start the sequence off as 1
	   00000001
 000001AE  A1 00000261 R		mov		eax, current				; move the current to a print register
 000001B3  E8 00000000 E		call	WriteDec						; print out
 000001B8  E8 00000000 E		call	CrLf							; sequence is done so new line
 000001BD  EB 7C			jmp		RunAgain						; jump to the end of the program, ask if they wanna start over

				;---------------------------------------------------------------;
				;	The Case2 label will only be called if the user enteres		;
				;	2 as their number of fibonacci sequencings to print.		;
				;---------------------------------------------------------------;
 000001BF			Case2:
 000001BF  C7 05 00000261 R		mov		current, 1					; start the sequence off as 1
	   00000001
 000001C9  A1 00000261 R		mov		eax, current				; move the current to a print register
 000001CE  E8 00000000 E		call	WriteDec						; print
 000001D3  BA 00000232 R		mov		edx, OFFSET large_spacer		; set the spacing dword to a string register
 000001D8  E8 00000000 E		call	WriteString						; print out to organize outputs
 000001DD  A1 00000261 R		mov		eax, current				; back to integers, next up is 1 (cause 0 + 1 = 1)
 000001E2  E8 00000000 E		call	WriteDec						; print
 000001E7  E8 00000000 E		call	CrLf							; sequence is done so new line
 000001EC  EB 4D			jmp		RunAgain						; jump to the end of the program, ask if they wanna start over

				;---------------------------------------------------------------;
				;	The Case3 label will only be called if the user enteres		;
				;	3 as their number of fibonacci sequencings to print.		;
				;---------------------------------------------------------------;
 000001EE			Case3:
 000001EE  C7 05 00000261 R		mov		current, 1					; start the sequence off as 1
	   00000001
 000001F8  A1 00000261 R		mov		eax, current				; move the current to a print register
 000001FD  E8 00000000 E		call	WriteDec						; print
 00000202  BA 00000232 R		mov		edx, OFFSET large_spacer		; set the spacing dword to a string register
 00000207  E8 00000000 E		call	WriteString						; print out to organize outputs
 0000020C  A1 00000261 R		mov		eax, current				; back to integers, next up is 1 (cause 0 + 1 = 1)
 00000211  E8 00000000 E		call	WriteDec						; print
 00000216  BA 00000232 R		mov		edx, OFFSET large_spacer		; set the spacing dword to a string register
 0000021B  E8 00000000 E		call	WriteString						; print spacing
 00000220  C7 05 00000261 R		mov		current, 2					; back to integers, next up is 2 (cause 1 + 1 = 2)
	   00000002
 0000022A  A1 00000261 R		mov		eax, current				; move ints to integer register
 0000022F  E8 00000000 E		call	WriteDec						; print
 00000234  E8 00000000 E		call	CrLf							; sequence is done, new line
 00000239  EB 00			jmp		RunAgain						; jump to end of program, ask if they wanna start over

				;---------------------------------------------------------------;
				;	The RunAgain label will test to see if the user is			;
				;	wanting to run the process one more time, which is 1		;
				;	is inputed, will jump the user back into the				;
				;	introduction where the user will be asked to input more		;
				;	integers. If anything else is answered, the program will	;
				;	exit to the OS.												;
				;---------------------------------------------------------------;
 0000023B			RunAgain:
 0000023B  E8 00000000 E			call	CrLf
 00000240  BA 00000148 R			mov		edx, OFFSET prompt_3		; run again prompt
 00000245  E8 00000000 E			call	WriteString
 0000024A  E8 00000000 E			call	ReadInt						; read in the user input for an answer
 0000024F  A3 00000275 R			mov		keep_going, eax				; move the user input to a readable register

 00000254  83 F8 01				cmp		eax, 1						; compare if the user input was a '1'
 00000257  0F 84 FFFFFDDA			je		Inputs						; Jumps to int inputs if wanted, else end program

					; exit the program
 0000025D  BA 00000206 R			mov		edx, OFFSET finished		; program is done message
 00000262  E8 00000000 E			call	CrLf						; add an extra new line for good looks
 00000267  E8 00000000 E			call	WriteString
 0000026C  BA 0000023C R			mov		edx, OFFSET userinput
 00000271  E8 00000000 E			call	WriteString
 00000276  E8 00000000 E			call	CrLf
					exit									; close program, return to OS
 0000027B  6A 00	   *	    push   +000000000h
 0000027D  E8 00000000 E   *	    call   ExitProcess
 00000282			main ENDP									; the main PROC is finished, this symbolyses that we are done with the proc


				END main									; the symbolyses that the main program is finished
Microsoft (R) Macro Assembler Version 14.16.27026.1	    01/20/19 21:22:42
Program 2		(Project2.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000279 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000282 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000282 Public STDCALL
  Inputs . . . . . . . . . . . .	L Near	 00000037 _TEXT	
  LowerInput . . . . . . . . . .	L Near	 000000AB _TEXT	
  HigherInput  . . . . . . . . .	L Near	 000000BF _TEXT	
  Calculations . . . . . . . . .	L Near	 000000D3 _TEXT	
  fib_loop . . . . . . . . . . .	L Near	 00000124 _TEXT	
  space  . . . . . . . . . . . .	L Near	 00000157 _TEXT	
  reset_line . . . . . . . . . .	L Near	 00000177 _TEXT	
  finishingUP  . . . . . . . . .	L Near	 00000188 _TEXT	
  endOfLoop  . . . . . . . . . .	L Near	 000001A2 _TEXT	
  Case1  . . . . . . . . . . . .	L Near	 000001A4 _TEXT	
  Case2  . . . . . . . . . . . .	L Near	 000001BF _TEXT	
  Case3  . . . . . . . . . . . .	L Near	 000001EE _TEXT	
  RunAgain . . . . . . . . . . .	L Near	 0000023B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXFIB . . . . . . . . . . . . .	Number	 0000002Eh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINFIB . . . . . . . . . . . . .	Number	 00000001h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byteCount  . . . . . . . . . . .	DWord	 00000251 _DATA	
current  . . . . . . . . . . . .	DWord	 00000261 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
failed_input_1 . . . . . . . . .	Byte	 00000180 _DATA	
failed_input_2 . . . . . . . . .	Byte	 000001B1 _DATA	
finished . . . . . . . . . . . .	Byte	 00000206 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_1  . . . . . . . . . . . .	Byte	 0000002A _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00000077 _DATA	
intro_3  . . . . . . . . . . . .	Byte	 000000C6 _DATA	
intro_4  . . . . . . . . . . . .	Byte	 000000DE _DATA	
keep_going . . . . . . . . . . .	DWord	 00000275 _DATA	
large_spacer . . . . . . . . . .	Byte	 00000232 _DATA	
last . . . . . . . . . . . . . .	DWord	 00000265 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
loop_count . . . . . . . . . . .	DWord	 0000026D _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
mult . . . . . . . . . . . . . .	DWord	 00000271 _DATA	
num_of_fibs  . . . . . . . . . .	DWord	 00000259 _DATA	
num_on_line  . . . . . . . . . .	DWord	 0000025D _DATA	
outro_1  . . . . . . . . . . . .	Byte	 000001E3 _DATA	
project  . . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 000000E8 _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 00000101 _DATA	
prompt_3 . . . . . . . . . . . .	Byte	 00000148 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
spacer . . . . . . . . . . . . .	Byte	 00000230 _DATA	
tmp  . . . . . . . . . . . . . .	DWord	 00000269 _DATA	
userinput  . . . . . . . . . . .	Byte	 0000023C _DATA	
username . . . . . . . . . . . .	DWord	 00000255 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
