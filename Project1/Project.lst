Microsoft (R) Macro Assembler Version 14.15.26726.0	    01/10/19 13:47:09
Program 1		(Project1.asm			     Page 1 - 1


				TITLE Program 1		(Project1.asm)

				; Author: Bryce Hahn
				; Course/Project ID: CS 271 Project 1
				; Date: 1/10/2019
				; Description:
				;		Get the input for two numbers from the user,
				;		check to see if the second is bigger than the first
				;		add, divide (reg, and floating point), subtract and multiply
				;		then print the results, prompt the user if they wish to go again

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;-----------------------;
				;    Var Declaration    ;
				;-----------------------;
 00000000			.data
 00000000 00000000		num1			DWORD	?																					; The first number the user will enter
 00000004 00000000		num2			DWORD	?																					; The second number the user will enter
 00000008 00000000		sum				DWORD	?																					; the sum of the inputs
 0000000C 00000000		dif				DWORD	?																					; the difference of the inputs
 00000010 00000000		prod			DWORD	?																					; the product of the inputs
 00000014 00000000		quotient		DWORD	?																					; the quotient of the inputs
 00000018 00000000		remain			DWORD	?																					; the remainder of the quotient
 0000001C 00000000		fpnt_quotient	REAL4	?																					; extra credit: the floating point quotient
 00000020 000003E8		fpnt_thousanth	DWORD	1000																				; extra credit: decimal to the thousanth
 00000024 00000000		fpnt_whole		DWORD	?																					; extra credit: the whole number before the decimal
 00000028 00000000		fpnt_decimal	DWORD	?																					; extra credit: the decimal representation
 0000002C 00000000		fpnt_by1000		DWORD	0																					; the result from first division by 1000 as a 4 digit int
 00000030 00000000		fpnt_remainder	DWORD	?																					; the remainder
 00000034 00000000		fpnt_hold		DWORD	?																					; a temporary value while calculating the remainder
 00000038 00000000		keep_going		DWORD	?																					; Continue running the program until the user quits
 0000003C 57 65 6C 63 6F	intro_1			BYTE	"Welcome to Add 'Em Up! In this program you will give me two integers,", 0			; the folowing 3 are the declaration of the intro descriptions
	   6D 65 20 74 6F
	   20 41 64 64 20
	   27 45 6D 20 55
	   70 21 20 49 6E
	   20 74 68 69 73
	   20 70 72 6F 67
	   72 61 6D 20 79
	   6F 75 20 77 69
	   6C 6C 20 67 69
	   76 65 20 6D 65
	   20 74 77 6F 20
	   69 6E 74 65 67
	   65 72 73 2C 00
 00000082 61 6E 64 20 49	intro_2			BYTE	"and I will calculate them up! (add, subtract, multiply, and divide)", 0
	   20 77 69 6C 6C
	   20 63 61 6C 63
	   75 6C 61 74 65
	   20 74 68 65 6D
	   20 75 70 21 20
	   28 61 64 64 2C
	   20 73 75 62 74
	   72 61 63 74 2C
	   20 6D 75 6C 74
	   69 70 6C 79 2C
	   20 61 6E 64 20
	   64 69 76 69 64
	   65 29 00
 000000C6 45 78 74 72 61	intro_3			BYTE	"Extra Credit: I will ensure the second integer is lower than the first!", 0
	   20 43 72 65 64
	   69 74 3A 20 49
	   20 77 69 6C 6C
	   20 65 6E 73 75
	   72 65 20 74 68
	   65 20 73 65 63
	   6F 6E 64 20 69
	   6E 74 65 67 65
	   72 20 69 73 20
	   6C 6F 77 65 72
	   20 74 68 61 6E
	   20 74 68 65 20
	   66 69 72 73 74
	   21 00
 0000010E 50 6C 65 61 73	prompt_1		BYTE	"Please provide your first integer: ", 0											; the folowing 2 are the prompts for the integer inputs
	   65 20 70 72 6F
	   76 69 64 65 20
	   79 6F 75 72 20
	   66 69 72 73 74
	   20 69 6E 74 65
	   67 65 72 3A 20
	   00
 00000132 50 6C 65 61 73	prompt_2		BYTE	"Please provide your second integer: ", 0
	   65 20 70 72 6F
	   76 69 64 65 20
	   79 6F 75 72 20
	   73 65 63 6F 6E
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00
 00000157 54 68 65 20 73	failed_1		BYTE	"The second integer was bigger than the first.", 0									; warn the user the second int was too big
	   65 63 6F 6E 64
	   20 69 6E 74 65
	   67 65 72 20 77
	   61 73 20 62 69
	   67 67 65 72 20
	   74 68 61 6E 20
	   74 68 65 20 66
	   69 72 73 74 2E
	   00
 00000185 50 6C 65 61 73	failed_prompt_1 BYTE	"Please enter a new integer: ", 0													; prompt the user for a different integer
	   65 20 65 6E 74
	   65 72 20 61 20
	   6E 65 77 20 69
	   6E 74 65 67 65
	   72 3A 20 00
 000001A2 54 68 65 20 73	result_1		BYTE	"The sum of ", 0																	; the start of the sum result
	   75 6D 20 6F 66
	   20 00
 000001AE 54 68 65 20 64	result_2		BYTE	"The difference of ", 0																; the start of the difference result
	   69 66 66 65 72
	   65 6E 63 65 20
	   6F 66 20 00
 000001C1 54 68 65 20 70	result_3		BYTE	"The product of ", 0																; the start of the product result
	   72 6F 64 75 63
	   74 20 6F 66 20
	   00
 000001D1 54 68 65 20 71	result_4		BYTE	"The quotient of ", 0																; the start of the quotient result
	   75 6F 74 69 65
	   6E 74 20 6F 66
	   20 00
 000001E2 45 78 74 72 61	result_5		BYTE	"Extra Credit: The floating-point quotient of ", 0												; extra credit: the start of the floating point quotient result
	   20 43 72 65 64
	   69 74 3A 20 54
	   68 65 20 66 6C
	   6F 61 74 69 6E
	   67 2D 70 6F 69
	   6E 74 20 71 75
	   6F 74 69 65 6E
	   74 20 6F 66 20
	   00
 00000210 44 6F 20 79 6F	prompt_3		BYTE	"Do you wish to add some more? (Press 1 to start over) ", 0							; extra credit: prompt the user to start over
	   75 20 77 69 73
	   68 20 74 6F 20
	   61 64 64 20 73
	   6F 6D 65 20 6D
	   6F 72 65 3F 20
	   28 50 72 65 73
	   73 20 31 20 74
	   6F 20 73 74 61
	   72 74 20 6F 76
	   65 72 29 20 00
 00000247 54 68 61 6E 6B	finish			BYTE	"Thanks for addin up! Goodbye.", 0													; goodbye message
	   73 20 66 6F 72
	   20 61 64 64 69
	   6E 20 75 70 21
	   20 47 6F 6F 64
	   62 79 65 2E 00
 00000265 3D 00			result_string	BYTE	"=", 0																				; all the folowing are for a clean calculation output
 00000267 2B 00			sum_string		BYTE	"+", 0
 00000269 2D 00			dif_string		BYTE	"-", 0
 0000026B 2A 00			prod_string		BYTE	"*", 0
 0000026D 2F 00			quotient_string BYTE	"/", 0
 0000026F 20 72 65 6D 61	remain_string	BYTE	" remainder ", 0
	   69 6E 64 65 72
	   20 00
 0000027B 2E 00			dot_string		BYTE	".", 0


				;------------------------;
				;    Code Declaration    ;
				; This section is where	 ;
				; the bulk of the program;
				; is going to be writen  ;
				;------------------------;
 00000000			.code
				;---------------------------------------------------------------;
				;	main PROC will be called once the program is run, this		;
				;	is where we can call other processes so that we aren't		;
				;	crowded into the main function like this (GROSS), so we		;
				;	will implement this into further projects.					;
				;---------------------------------------------------------------;
 00000000			main PROC
 00000000  BA 0000003C R			mov		edx, OFFSET intro_1			; print the program introduction (Called only once when the program starts since the user doesn't need to see this after they restart)
 00000005  E8 00000000 E		call	WriteString
 0000000A  E8 00000000 E			call	CrLf						; new line
 0000000F  BA 00000082 R			mov		edx, OFFSET intro_2			; print the program introduction part 2
 00000014  E8 00000000 E			call	WriteString
 00000019  E8 00000000 E			call	CrLf						; new line
 0000001E  BA 000000C6 R			mov		edx, OFFSET intro_3			; print the warning to keep the second input below the first
 00000023  E8 00000000 E			call	WriteString
 00000028  E8 00000000 E			call	CrLf						; new line

				;---------------------------------------------------------------;
				;	The Inputs label will be the start of the program,			;
				;	where we will prompt the user to input their 2 integers		;
				;	into our num1 and num2 DWORDS. This will also be jumped		;
				;	back into when the user states they wish to restart the		;
				;	program.													;
				;---------------------------------------------------------------;
 0000002D			Inputs:	
 0000002D  BA 0000010E R			mov		edx, OFFSET prompt_1		; prompt the user for their first int
 00000032  E8 00000000 E			call	WriteString
 00000037  E8 00000000 E			call	ReadInt						; read in the user input
 0000003C  A3 00000000 R			mov		num1, eax					; move input val to num1, later projects we need to check if real int

 00000041  BA 00000132 R			mov		edx, OFFSET prompt_2		; prompt the user for their second int
 00000046  E8 00000000 E			call	WriteString
 0000004B  E8 00000000 E			call	ReadInt						; read in the user input
 00000050  A3 00000004 R			mov		num2, eax					; move the input val to num2

															; check to see if the second integer is bigger than the first one
 00000055  A1 00000004 R			mov		eax, num2					; move the num2 to int reg
 0000005A  3B 05 00000000 R			cmp		eax, num1					; compare int reg val (num2) to num1
 00000060  7F 02				jg		FailedInput					; if greater than, jump to failedInput label
 00000062  7E 32				jle		Calculations				; if less than or equal to, jump to calculations label

				;---------------------------------------------------------------;
				;	The FailedInputs label will be jumped to when the user		;
				;	inputs a faulty second integer, because it was above the	;
				;	first given integer. This will warn the user to input a		;
				;	proper lower int, then ask for a new int, and check if		;
				;	the new int is above num1. If successful, will jump the		;
				;	user to the calculations label.								;
				;---------------------------------------------------------------;
 00000064			FailedInput:
 00000064  BA 00000157 R			mov		edx, OFFSET failed_1		; warn the user that the input was too large
 00000069  E8 00000000 E			call	WriteString
 0000006E  E8 00000000 E			call	CrLf
 00000073  BA 00000185 R			mov		edx, OFFSET failed_prompt_1	; prompt the user for a newer, lower int
 00000078  E8 00000000 E			call	WriteString
 0000007D  E8 00000000 E			call	ReadInt						; read the user input
 00000082  A3 00000004 R			mov		num2, eax					; move int reg val to num2

						;once again check
 00000087  A1 00000004 R			mov		eax, num2					; just to be sure, move num2 to int reg
 0000008C  3B 05 00000000 R			cmp		eax, num1					; compare int reg val (num2) to num1
 00000092  7F D0				jg		FailedInput					; jump if greater than, restart label
 00000094  7E 00				jle		Calculations				; jump if less than or equal, start calculations label

				;---------------------------------------------------------------;
				;	The Calculations label will be the bulk of the process,		;
				;	where we calculate the different math operations, and		;
				;	output them (very smoothly with proper symbols) to the		;
				;	output.														;
				;---------------------------------------------------------------;
 00000096			Calculations:
					; calculate the sum of the two numbers
 00000096  A1 00000000 R			mov		eax, num1					; move num1 to int reg
 0000009B  03 05 00000004 R			add		eax, num2					; add num2 to int reg val
 000000A1  A3 00000008 R			mov		sum, eax					; move reg val to sum DWORD
						
					; calculate the difference of the two numbers
 000000A6  A1 00000000 R			mov		eax, num1					; move num1 to int reg 1
 000000AB  8B 1D 00000004 R			mov		ebx, num2					; move num2 to int reg 2
 000000B1  2B C3				sub		eax, ebx					; subtract reg 2 from reg 1
 000000B3  A3 0000000C R			mov		dif, eax					; move reg 1 val to dif DWORD

					; calculate the product of the two numbers
 000000B8  A1 00000000 R			mov		eax, num1					; move num1 to int reg 1
 000000BD  8B 1D 00000004 R			mov		ebx, num2					; move num2 to int reg 2
 000000C3  F7 E3				mul		ebx							; multiply reg 1 by reg 2
 000000C5  A3 00000010 R			mov		prod, eax					; move reg 1 val to prod DWORD

					; calculate the quotient of the two numbers
 000000CA  BA 00000000				mov		edx, 0						; set the value or remainder reg to 0
 000000CF  A1 00000000 R			mov		eax, num1					; move num1 to int reg 1
 000000D4  99					cdq									; convert DoubleWord to QuadWord
 000000D5  8B 1D 00000004 R			mov		ebx, num2					; move num2 to int reg 2
 000000DB  99					cdq									; convert DoubleWord to QuadWord
 000000DC  F7 F3				div		ebx							; divide reg 1 by reg 2
 000000DE  A3 00000014 R			mov		quotient, eax				; move reg 1 val to quotient (final form)
 000000E3  89 15 00000018 R			mov		remain, edx					; move reg 2 val to remainder (final form)

					; calculate the floating point quotient of the two numbers
 000000E9  D9 05 00000000 R			fld		num1						; load num1 as a floating point into stack 0
 000000EF  D8 35 00000004 R			fdiv	num2						; floating point divide num1 by num2
 000000F5  DA 0D 00000020 R			fimul	fpnt_thousanth				; multiply by 1000 to get 4 digits that will be used when spliting for decimal and whole int
 000000FB  D9 FC				frndint								; round the number to a whole int so we can move to our var
 000000FD  DB 15 0000002C R			fist	fpnt_by1000					; store calculated int into 4 digit int var
 00000103  D9 15 0000001C R			fst		fpnt_quotient				; store calculated floating point from stack


					; print result
 00000109  BA 000001A2 R			mov		edx, OFFSET result_1
 0000010E  E8 00000000 E			call	WriteString					; "The sum of "
 00000113  A1 00000000 R			mov		eax, num1
 00000118  E8 00000000 E			call	WriteDec					; num1
 0000011D  BA 00000267 R			mov		edx, OFFSET sum_string
 00000122  E8 00000000 E			call	WriteString					; "+"
 00000127  A1 00000004 R			mov		eax, num2
 0000012C  E8 00000000 E			call	WriteDec					; num2
 00000131  BA 00000265 R			mov		edx, OFFSET result_string
 00000136  E8 00000000 E			call	WriteString					; "="
 0000013B  A1 00000008 R			mov		eax, sum
 00000140  E8 00000000 E			call	WriteDec					; res
 00000145  E8 00000000 E			call	CrLf

 0000014A  BA 000001AE R			mov		edx, OFFSET result_2
 0000014F  E8 00000000 E			call	WriteString					; "The difference of "
 00000154  A1 00000000 R			mov		eax, num1
 00000159  E8 00000000 E			call	WriteDec					; num1
 0000015E  BA 00000269 R			mov		edx, OFFSET dif_string
 00000163  E8 00000000 E			call	WriteString					; "-"
 00000168  A1 00000004 R			mov		eax, num2
 0000016D  E8 00000000 E			call	WriteDec					; num2
 00000172  BA 00000265 R			mov		edx, OFFSET result_string
 00000177  E8 00000000 E			call	WriteString					; "="
 0000017C  A1 0000000C R			mov		eax, dif
 00000181  E8 00000000 E			call	WriteDec					; res
 00000186  E8 00000000 E			call	CrLf

 0000018B  BA 000001C1 R			mov		edx, OFFSET result_3
 00000190  E8 00000000 E			call	WriteString					; "The product of "
 00000195  A1 00000000 R			mov		eax, num1
 0000019A  E8 00000000 E			call	WriteDec					; num1
 0000019F  BA 0000026B R			mov		edx, OFFSET prod_string
 000001A4  E8 00000000 E			call	WriteString					; "*"
 000001A9  A1 00000004 R			mov		eax, num2
 000001AE  E8 00000000 E			call	WriteDec					; num2
 000001B3  BA 00000265 R			mov		edx, OFFSET result_string
 000001B8  E8 00000000 E			call	WriteString					; "="
 000001BD  A1 00000010 R			mov		eax, prod
 000001C2  E8 00000000 E			call	WriteDec					; res
 000001C7  E8 00000000 E			call	CrLf

 000001CC  BA 000001D1 R			mov		edx, OFFSET result_4
 000001D1  E8 00000000 E			call	WriteString					; "The quotient of "
 000001D6  A1 00000000 R			mov		eax, num1
 000001DB  E8 00000000 E			call	WriteDec					; num1
 000001E0  BA 0000026D R			mov		edx, OFFSET quotient_string
 000001E5  E8 00000000 E			call	WriteString					; "/"
 000001EA  A1 00000004 R			mov		eax, num2
 000001EF  E8 00000000 E			call	WriteDec					; num2
 000001F4  BA 00000265 R			mov		edx, OFFSET result_string
 000001F9  E8 00000000 E			call	WriteString					; "="
 000001FE  A1 00000014 R			mov		eax, quotient
 00000203  E8 00000000 E			call	WriteDec					; quotient
 00000208  BA 0000026F R			mov		edx, OFFSET remain_string
 0000020D  E8 00000000 E			call	WriteString					; " remainder "
 00000212  A1 00000018 R			mov		eax, remain
 00000217  E8 00000000 E			call	WriteDec					; remainder
 0000021C  E8 00000000 E			call	CrLf


 00000221  BA 000001E2 R			mov		edx, OFFSET result_5
 00000226  E8 00000000 E			call	WriteString					; "The floating-point quotient of "
 0000022B  A1 00000000 R			mov		eax, num1
 00000230  E8 00000000 E			call	WriteDec					; num1
 00000235  BA 0000026D R			mov		edx, OFFSET quotient_string
 0000023A  E8 00000000 E			call	WriteString					; "/"
 0000023F  A1 00000004 R			mov		eax, num2
 00000244  E8 00000000 E			call	WriteDec					; num2
 00000249  BA 00000265 R			mov		edx, OFFSET result_string
 0000024E  E8 00000000 E			call	WriteString					; "="
 00000253  BA 00000000				mov		edx, 0						; prep the remainder
 00000258  A1 0000002C R			mov		eax, fpnt_by1000			; load the 4 digit int to int reg
 0000025D  99					cdq									; convert doubleword to quadword
 0000025E  BB 000003E8				mov		ebx, 1000					; prep 1000 into the reg to divide eax, this will give us not only the remainder but the whole number
 00000263  99					cdq									; convert doubleword into quadword
 00000264  F7 F3				div		ebx							; divide eax by 1000 to get the rounded whole number
 00000266  A3 00000024 R			mov		fpnt_whole, eax				; store the new number into the whole var
 0000026B  89 1D 00000030 R			mov		fpnt_remainder, ebx			; store the calculated remainder into the var
 00000271  A1 00000024 R			mov		eax, fpnt_whole				; set the whole number to the reg
 00000276  E8 00000000 E			call	WriteDec
 0000027B  BA 0000027B R			mov		edx, OFFSET dot_string		; "."
 00000280  E8 00000000 E			call	WriteString
 00000285  A1 00000024 R			mov		eax, fpnt_whole				; move the whole num to int reg
 0000028A  F7 25 00000020 R			mul		fpnt_thousanth				; multiply by 1000
 00000290  A3 00000034 R			mov		fpnt_hold, eax				; move int reg val to temporary var
 00000295  A1 0000002C R			mov		eax, fpnt_by1000			; move the 1000th to int reg
 0000029A  2B 05 00000034 R			sub		eax, fpnt_hold				; subtract the first digit (timed by 1000) to get a 4 digit to 3 (being the remainder left over)
 000002A0  A3 00000028 R			mov		fpnt_decimal, eax			; move this new calulated val from the int reg to the decimal var
 000002A5  E8 00000000 E			call	WriteDec					; write it out
 000002AA  E8 00000000 E			call	CrLf

				;---------------------------------------------------------------;
				;	The RunAgain label will test to see if the user is			;
				;	wanting to run the process one more time, which is 1		;
				;	is inputed, will jump the user back into the				;
				;	introduction where the user will be asked to input more		;
				;	integers. If anything else is answered, the program will	;
				;	exit to the OS.												;
				;---------------------------------------------------------------;
 000002AF			RunAgain:
 000002AF  BA 00000210 R			mov		edx, OFFSET prompt_3		; run again prompt
 000002B4  E8 00000000 E			call	WriteString
 000002B9  E8 00000000 E			call	ReadInt						; read in the user input for an answer
 000002BE  A3 00000038 R			mov		keep_going, eax				; move the user input to a readable register

 000002C3  83 F8 01				cmp		eax, 1						; compare if the user input was a '1'
 000002C6  0F 84 FFFFFD61			je		Inputs						; Jumps to int inputs if wanted, else end program

					; exit the program
 000002CC  BA 00000247 R			mov		edx, OFFSET finish			; program is done message
 000002D1  E8 00000000 E			call	CrLf						; add an extra new line for good looks
 000002D6  E8 00000000 E			call	WriteString
 000002DB  E8 00000000 E			call	CrLf
					exit									; close program, return to OS
 000002E0  6A 00	   *	    push   +000000000h
 000002E2  E8 00000000 E   *	    call   ExitProcess
 000002E7			main ENDP									; the main PROC is finished, this symbolyses that we are done with the proc


				END main									; the symbolyses that the main program is finished
Microsoft (R) Macro Assembler Version 14.15.26726.0	    01/10/19 13:47:09
Program 1		(Project1.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000027D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002E7 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000002E7 Public STDCALL
  Inputs . . . . . . . . . . . .	L Near	 0000002D _TEXT	
  FailedInput  . . . . . . . . .	L Near	 00000064 _TEXT	
  Calculations . . . . . . . . .	L Near	 00000096 _TEXT	
  RunAgain . . . . . . . . . . .	L Near	 000002AF _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dif_string . . . . . . . . . . .	Byte	 00000269 _DATA	
dif  . . . . . . . . . . . . . .	DWord	 0000000C _DATA	
dot_string . . . . . . . . . . .	Byte	 0000027B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
failed_1 . . . . . . . . . . . .	Byte	 00000157 _DATA	
failed_prompt_1  . . . . . . . .	Byte	 00000185 _DATA	
finish . . . . . . . . . . . . .	Byte	 00000247 _DATA	
fpnt_by1000  . . . . . . . . . .	DWord	 0000002C _DATA	
fpnt_decimal . . . . . . . . . .	DWord	 00000028 _DATA	
fpnt_hold  . . . . . . . . . . .	DWord	 00000034 _DATA	
fpnt_quotient  . . . . . . . . .	DWord	 0000001C _DATA	
fpnt_remainder . . . . . . . . .	DWord	 00000030 _DATA	
fpnt_thousanth . . . . . . . . .	DWord	 00000020 _DATA	
fpnt_whole . . . . . . . . . . .	DWord	 00000024 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_1  . . . . . . . . . . . .	Byte	 0000003C _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00000082 _DATA	
intro_3  . . . . . . . . . . . .	Byte	 000000C6 _DATA	
keep_going . . . . . . . . . . .	DWord	 00000038 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
num1 . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
num2 . . . . . . . . . . . . . .	DWord	 00000004 _DATA	
prod_string  . . . . . . . . . .	Byte	 0000026B _DATA	
prod . . . . . . . . . . . . . .	DWord	 00000010 _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 0000010E _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 00000132 _DATA	
prompt_3 . . . . . . . . . . . .	Byte	 00000210 _DATA	
quotient_string  . . . . . . . .	Byte	 0000026D _DATA	
quotient . . . . . . . . . . . .	DWord	 00000014 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
remain_string  . . . . . . . . .	Byte	 0000026F _DATA	
remain . . . . . . . . . . . . .	DWord	 00000018 _DATA	
result_1 . . . . . . . . . . . .	Byte	 000001A2 _DATA	
result_2 . . . . . . . . . . . .	Byte	 000001AE _DATA	
result_3 . . . . . . . . . . . .	Byte	 000001C1 _DATA	
result_4 . . . . . . . . . . . .	Byte	 000001D1 _DATA	
result_5 . . . . . . . . . . . .	Byte	 000001E2 _DATA	
result_string  . . . . . . . . .	Byte	 00000265 _DATA	
sum_string . . . . . . . . . . .	Byte	 00000267 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000008 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
