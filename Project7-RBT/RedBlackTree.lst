Microsoft (R) Macro Assembler Version 14.16.27027.1	    03/13/19 13:12:08
,Project 7 - RedBlackTree		(RedBlackTree.asm    Page 1 - 1


				TITLE Project 7 - RedBlackTree		(RedBlackTree.asm)

				; Author: Bryce Hahn
				; Project ID: Project 7
				; Date: 3/13/2019
				; Description:
				;	Red Black Tree, options to read in values from
				;	a given file, auto generated within a given
				;	number of values, or through user input. Prints
				;	sorted tree to the console.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 = 00000001			MAXNUM			=		1																					; The min number of nodes that can be written
 = 000001F4			MINNUM			=		500																					; The max number of nodes that can be written

				;---------------------------------------------------------------;
				;	Macro mPrintString replaces having to move a byte to edx	;
				;	and call writeString with only one line. also allows for	;
				;	pretty lazy debuging which is a plus.						;
				;	THIS METHOD ONLY WORKS WITH VARAIBLES						;
				;---------------------------------------------------------------;
				mWriteString	MACRO	buffer:REQ
					push	edx
					mov		edx, OFFSET buffer
					call	WriteString
					pop		edx
				ENDM
				;---------------------------------------------------------------;
				;	Macro mWriteStringLn is the same as mWriteString but adds	;
				;	a new line after the printed text so you don't have to write;
				;	a new line call in the main functions.						;
				;---------------------------------------------------------------;
				mWriteStringLn	MACRO	buffer:REQ
					mWriteString	buffer
					call	CrLf
				ENDM
				;---------------------------------------------------------------;
				;	Macro mWriteDec prints out an Integer to the screen, this	;
				;	can be either a whole integer or a decimal					;
				;---------------------------------------------------------------;
				mWriteDec		MACRO	decimal
					push	eax
					mov		eax, decimal
					call	WriteDec
					pop		eax
				ENDM
				;---------------------------------------------------------------;
				;	Macro mWrite lets you write a string to the output without	;
				;	pre-emptively defining it, I.E in quotes you can write		;
				;	anything to the output.										;
				;---------------------------------------------------------------;
				mWrite			MACRO	text
					LOCAL	string
					.data
					string	BYTE	text, 0
					.code
					push	edx
					mov		edx, OFFSET string
					call	WriteString
					pop		edx
				ENDM
				;---------------------------------------------------------------;
				;	Macro mWriteLn is the same as mWrite but adds a new line	;
				;	call at the end so you don't have to write on in the code	;
				;	section of the functions.									;
				;---------------------------------------------------------------;
				mWriteLn		MACRO	text
					mWrite	text
					call	CrLf
				ENDM

 00000000			.code
				;---------------------------------------------------------------;
				;	main PROC will be called once the program is run, this		;
				;	is where we can call other processes so that we aren't		;
				;	crowded into the main function like this (GROSS), so we		;
				;	will implement this into further projects.					;
				;---------------------------------------------------------------;
 00000000			main	PROC
 00000000  E8 00000000 E			call		Randomize																				; set the time seed for the randomize functions in order to keep the generator psuedo-random
 00000005  E8 00000011				call		Intro																					; Introduce the user to the program
 0000000A  E8 00000060				call		GetUserRunOption																		; Get the user desired run option
 0000000F  E8 0000008C				call		ExecuteRunOption																		; Start the tree construction based on user option
					exit																									; close program, return to OS
 00000014  6A 00	   *	    push   +000000000h
 00000016  E8 00000000 E   *	    call   ExitProcess
 0000001B			main	ENDP																								; the main PROC is finished, this symbolyses that we are done with the proc

				;---------------------------------------------------------------;
				;	The intro procedure will be called right off the bat, sort	;
				;	of like before using procedures. This will allow to keep	;
				;	the main function clean and organized, making debugging		;
				;	easier! This function litterally just calls all intro		;
				;	scripts.													;
				;																;
				;	Parameters:		n/a											;
				;	Returns:		n/a											;
				;	Pre-Conditions:	called varaibles must be real strings		;
				;	Changed Regs:	eax, edx									;
				;---------------------------------------------------------------;
 0000001B			Intro	PROC
 0000001B  B8 00000003			mov				eax, cyan + (black * 16)																; color varaibles consist of: black, white, brown, yellow, blue, green, cyan, red, magenta, gray, 
 00000020  E8 00000000 E		call			setTextColor																			;							  lightBlue, lightGreen, lightCyan, lightRed, lightMagenta, and lightGray.

					mWriteLn		"Welcome to Red-Black Tree Sorting! Please select one of the following:"
 00000000		     2		.data
 00000000 57 65 6C 63 6F     2		??0000	BYTE	"Welcome to Red-Black Tree Sorting! Please select one of the following:", 0
	   6D 65 20 74 6F
	   20 52 65 64 2D
	   42 6C 61 63 6B
	   20 54 72 65 65
	   20 53 6F 72 74
	   69 6E 67 21 20
	   50 6C 65 61 73
	   65 20 73 65 6C
	   65 63 74 20 6F
	   6E 65 20 6F 66
	   20 74 68 65 20
	   66 6F 6C 6C 6F
	   77 69 6E 67 3A
	   00
 00000025		     2		.code
 00000025  52		     2		push	edx
 00000026  BA 00000000 R     2		mov		edx, OFFSET ??0000
 0000002B  E8 00000000 E     2		call	WriteString
 00000030  5A		     2		pop		edx
 00000031  E8 00000000 E     1		call	CrLf
					mWriteLn		"[1] Read values from input.txt"
 00000047		     2		.data
 00000047 5B 31 5D 20 52     2		??0001	BYTE	"[1] Read values from input.txt", 0
	   65 61 64 20 76
	   61 6C 75 65 73
	   20 66 72 6F 6D
	   20 69 6E 70 75
	   74 2E 74 78 74
	   00
 00000036		     2		.code
 00000036  52		     2		push	edx
 00000037  BA 00000047 R     2		mov		edx, OFFSET ??0001
 0000003C  E8 00000000 E     2		call	WriteString
 00000041  5A		     2		pop		edx
 00000042  E8 00000000 E     1		call	CrLf
					mWriteLn		"[2] Auto-Generate a given number of values"
 00000066		     2		.data
 00000066 5B 32 5D 20 41     2		??0002	BYTE	"[2] Auto-Generate a given number of values", 0
	   75 74 6F 2D 47
	   65 6E 65 72 61
	   74 65 20 61 20
	   67 69 76 65 6E
	   20 6E 75 6D 62
	   65 72 20 6F 66
	   20 76 61 6C 75
	   65 73 00
 00000047		     2		.code
 00000047  52		     2		push	edx
 00000048  BA 00000066 R     2		mov		edx, OFFSET ??0002
 0000004D  E8 00000000 E     2		call	WriteString
 00000052  5A		     2		pop		edx
 00000053  E8 00000000 E     1		call	CrLf
					mWriteLn		"[3] Input each individual values"
 00000091		     2		.data
 00000091 5B 33 5D 20 49     2		??0003	BYTE	"[3] Input each individual values", 0
	   6E 70 75 74 20
	   65 61 63 68 20
	   69 6E 64 69 76
	   69 64 75 61 6C
	   20 76 61 6C 75
	   65 73 00
 00000058		     2		.code
 00000058  52		     2		push	edx
 00000059  BA 00000091 R     2		mov		edx, OFFSET ??0003
 0000005E  E8 00000000 E     2		call	WriteString
 00000063  5A		     2		pop		edx
 00000064  E8 00000000 E     1		call	CrLf
 00000069  E8 00000000 E		call			CrLf
 0000006E  C3				ret
 0000006F			intro	ENDP

				;---------------------------------------------------------------;
				;	The GetUserRunOption procedure takes in the user input to	;
				;	decide which option the program will go with. The procedure	;
				;	actively validates inputs to ensure proper options.			;
				;																;
				;	Parameters:		n/a											;
				;	Returns:		n/a											;
				;	Pre-Conditions:	n/a											;
				;	Changed Regs:	eax, edx									;
				;---------------------------------------------------------------;
 0000006F			GetUserRunOption PROC
 0000006F				startUserInput:
						mWrite		"Please choose and option [1-3]: "
 000000B2		     1		.data
 000000B2 50 6C 65 61 73     1		??0004	BYTE	"Please choose and option [1-3]: ", 0
	   65 20 63 68 6F
	   6F 73 65 20 61
	   6E 64 20 6F 70
	   74 69 6F 6E 20
	   5B 31 2D 33 5D
	   3A 20 00
 0000006F		     1		.code
 0000006F  52		     1		push	edx
 00000070  BA 000000B2 R     1		mov		edx, OFFSET ??0004
 00000075  E8 00000000 E     1		call	WriteString
 0000007A  5A		     1		pop		edx
 0000007B  33 C0				xor			eax, eax																				; Completly clear eax register
 0000007D  E8 00000000 E			call		ReadDec																					; get user input

 00000082				verifyUserInput:
 00000082  83 F8 01				cmp			eax, 1																					; make sure the user inputed something within 1-3 range
 00000085  7C 06				jl			invalidInput																			; too low of an input value
 00000087  83 F8 03				cmp			eax, 3
 0000008A  7F 01				jg			invalidInput																			; too high of an input value
 0000008C  C3					ret

 0000008D				invalidInput:
						mWriteLn	"The entered value was not within the given option range."
 000000D3		     2		.data
 000000D3 54 68 65 20 65     2		??0005	BYTE	"The entered value was not within the given option range.", 0
	   6E 74 65 72 65
	   64 20 76 61 6C
	   75 65 20 77 61
	   73 20 6E 6F 74
	   20 77 69 74 68
	   69 6E 20 74 68
	   65 20 67 69 76
	   65 6E 20 6F 70
	   74 69 6F 6E 20
	   72 61 6E 67 65
	   2E 00
 0000008D		     2		.code
 0000008D  52		     2		push	edx
 0000008E  BA 000000D3 R     2		mov		edx, OFFSET ??0005
 00000093  E8 00000000 E     2		call	WriteString
 00000098  5A		     2		pop		edx
 00000099  E8 00000000 E     1		call	CrLf
 0000009E  EB CF				jmp			startUserInput

 000000A0			GetUserRunOption ENDP

				;---------------------------------------------------------------;
				;	The ExecuteRunOption process calls the given user inputted	;
				;	option for the program to continue.							;
				;																;
				;	Parameters:		option in eax								;
				;	Returns:		n/a											;
				;	Pre-Conditions:	eax contains 1-3 range options				;
				;	Changed Regs:	eax, edx									;
				;---------------------------------------------------------------;
 000000A0			ExecuteRunOption PROC
 000000A0  83 F8 01			cmp				eax, 1
 000000A3  74 0C			je				fileOption																				; User will run file load tree builder
 000000A5  83 F8 02			cmp				eax, 2
 000000A8  74 0D			je				generateOption																			; User will run auto-generated tree builder
 000000AA  83 F8 03			cmp				eax, 3
 000000AD  74 0E			je				inputOption																				; User will run self-inputed tree builder
 000000AF  EB 12			jmp				invalidOption																			; User somehow got past the int validater, end

 000000B1				fileOption:
 000000B1  E8 0000001F				call		LoadFileOption
 000000B6  C3					ret

 000000B7				generateOption:
 000000B7  E8 0000001A				call		GenerateValuesOption
 000000BC  C3					ret

 000000BD				inputOption:
 000000BD  E8 00000015				call		InputValuesOption
 000000C2  C3					ret

 000000C3				invalidOption:
						mWriteLn	"Invalid Input! This error is a rare case where the invalid user input passed input checks..."
 0000010C		     2		.data
 0000010C 49 6E 76 61 6C     2		??0006	BYTE	"Invalid Input! This error is a rare case where the invalid user input passed input checks...", 0
	   69 64 20 49 6E
	   70 75 74 21 20
	   54 68 69 73 20
	   65 72 72 6F 72
	   20 69 73 20 61
	   20 72 61 72 65
	   20 63 61 73 65
	   20 77 68 65 72
	   65 20 74 68 65
	   20 69 6E 76 61
	   6C 69 64 20 75
	   73 65 72 20 69
	   6E 70 75 74 20
	   70 61 73 73 65
	   64 20 69 6E 70
	   75 74 20 63 68
	   65 63 6B 73 2E
	   2E 2E 00
 000000C3		     2		.code
 000000C3  52		     2		push	edx
 000000C4  BA 0000010C R     2		mov		edx, OFFSET ??0006
 000000C9  E8 00000000 E     2		call	WriteString
 000000CE  5A		     2		pop		edx
 000000CF  E8 00000000 E     1		call	CrLf
 000000D4  C3					ret

 000000D5			ExecuteRunOption ENDP

				;---------------------------------------------------------------;
				;	The LoadFileOption procedure is called when the user chose	;
				;	to load the RBT with values off a file, specifically from	;
				;	input.txt. If the file doesn't exist, we will warn the user	;
				;	then quit.													;
				;																;
				;	Parameters:		n/a											;
				;	Returns:		n/a											;
				;	Pre-Conditions:	file.txt exists								;
				;	Changed Regs:	
				;---------------------------------------------------------------;
 000000D5			LoadFileOption PROC
					
 000000D5  C3				ret
 000000D6			LoadFileOption ENDP

				;---------------------------------------------------------------;
				;	The GenerateValuesOption procedure is called when the user	;
				;	chose to load the RBT with auto-generated values by the		;
				;	program. The user specifies how many values to generate.	;
				;																;
				;	Parameters:		n/a											;
				;	Returns:		n/a											;
				;	Pre-Conditions:	n/a											;
				;	Changed Regs:	eax, edx
				;---------------------------------------------------------------;
 000000D6			GenerateValuesOption PROC
					
 000000D6  C3				ret
 000000D7			GenerateValuesOption ENDP

				;---------------------------------------------------------------;
				;	The InputValuesOption procedure is called when the user		;
				;	chose to load the RBT with user specified values. The user	;
				;	can continue adding, deleting and searching until further	;
				;	specified.													;
				;																;
				;	Parameters:		n/a											;
				;	Returns:		n/a											;
				;	Pre-Conditions:	n/a											;
				;	Changed Regs:	eax, edx
				;---------------------------------------------------------------;
 000000D7			InputValuesOption PROC
					
 000000D7  C3				ret
 000000D8			InputValuesOption ENDP




				END main																									; the symbolyses that the main program is finished
Microsoft (R) Macro Assembler Version 14.16.27027.1	    03/13/19 13:12:08
,Project 7 - RedBlackTree		(RedBlackTree.asm    Symbols 2 - 1




Macros:

                N a m e                 Type

mWriteDec  . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteStringLn . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000169 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000D8 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExecuteRunOption . . . . . . . .	P Near	 000000A0 _TEXT	Length= 00000035 Public STDCALL
  fileOption . . . . . . . . . .	L Near	 000000B1 _TEXT	
  generateOption . . . . . . . .	L Near	 000000B7 _TEXT	
  inputOption  . . . . . . . . .	L Near	 000000BD _TEXT	
  invalidOption  . . . . . . . .	L Near	 000000C3 _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateValuesOption . . . . . .	P Near	 000000D6 _TEXT	Length= 00000001 Public STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetUserRunOption . . . . . . . .	P Near	 0000006F _TEXT	Length= 00000031 Public STDCALL
  startUserInput . . . . . . . .	L Near	 0000006F _TEXT	
  verifyUserInput  . . . . . . .	L Near	 00000082 _TEXT	
  invalidInput . . . . . . . . .	L Near	 0000008D _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InputValuesOption  . . . . . . .	P Near	 000000D7 _TEXT	Length= 00000001 Public STDCALL
Intro  . . . . . . . . . . . . .	P Near	 0000001B _TEXT	Length= 00000054 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LoadFileOption . . . . . . . . .	P Near	 000000D5 _TEXT	Length= 00000001 Public STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00000047 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 00000066 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00000091 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 000000B2 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 000000D3 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 0000010C _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXNUM . . . . . . . . . . . . .	Number	 00000001h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINNUM . . . . . . . . . . . . .	Number	 000001F4h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
